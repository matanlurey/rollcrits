{"version":3,"sources":["state/State.tsx","ui/Pool.tsx","ui/Output.tsx","App.tsx","index.tsx"],"names":["encodeConfig","config","btoa","JSON","stringify","DiceInput","props","Item","label","value","count","min","onChange","Number","isInteger","AttackDiceSide","Pool","dice","this","labelCol","xs","span","sm","red","v","updateDice","black","white","newPool","onChanged","React","Component","DiceRng","rng","Prando","nextArrayItem","table","crit","surge","hit","blank","data","i","hits","incrementIfHit","side","w","b","r","push","iterations","bordered","columns","title","dataIndex","width","key","QuestionCircleOutlined","dataSource","type","stats","toFixed","details","href","rel","Sider","Layout","App","state","fragment","urlState","window","location","hash","indexOf","substring","length","parse","atob","decodeConfig","defaultState","encodedState","defaultEncodedState","console","log","toString","slider","encodeStateIfChanged","style","height","breakpoint","collapsedWidth","className","SettingOutlined","max","marks","1","3","5","iterationsToSlider","tipFormatter","slideToIterations","bind","setState","StarOutlined","attackPool","newDice","Content","margin","Output","shortHash","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9db3032.chunk.js","sourcesContent":["/**\n * Simulation-wide state (or configuration).\n */\nexport interface SimConfig {\n  /**\n   * Attacking dice pool.\n   */\n  attackPool: AttackDiceConfig;\n\n  /**\n   * Number of times the dice should be rolled.\n   */\n  iterations: number;\n}\n\n/**\n * Encodes the provided configuration as base-64 encoded string.\n *\n * @param config\n */\nexport function encodeConfig(config: SimConfig): string {\n  return btoa(JSON.stringify(config));\n}\n\n/**\n * Decodes the provided hash-fragment URL into a config.\n *\n * Returns {undefined} if there was no stored configuration.\n */\nexport function decodeConfig(fragment: string): SimConfig | undefined {\n  let urlState = window.location.hash;\n  if (urlState) {\n    const fragment = urlState.indexOf(\"#\");\n    if (fragment !== -1) {\n      urlState = urlState.substring(fragment + 1);\n    }\n    if (urlState && urlState.length) {\n      return JSON.parse(atob(urlState));\n    }\n  }\n  return undefined;\n}\n\nexport interface AttackDiceConfig {\n  /**\n   * Number of red dice.\n   */\n  red: number;\n\n  /**\n   * Number of black dice.\n   */\n  black: number;\n\n  /**\n   * Number of white dice.\n   */\n  white: number;\n}\n","import React from \"react\";\nimport { Form, InputNumber } from \"antd\";\nimport { AttackDiceConfig } from \"../state/State\";\n\nfunction DiceInput(props: {\n  label: React.ReactNode;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form\n        labelCol={{\n          xs: { span: 24 },\n          sm: { span: 8 },\n        }}\n      >\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<AttackDiceConfig>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: AttackDiceConfig;\n  readonly onChanged: (pool: AttackDiceConfig) => void;\n}\n","import React from \"react\";\nimport Prando from \"prando\";\nimport { Table } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport * as stats from \"simple-statistics\";\nimport { AttackDiceConfig } from \"../state/State\";\n\nenum AttackDiceSide {\n  blank,\n  surge,\n  hit,\n  crit,\n}\n\nclass DiceRng {\n  private static readonly table = {\n    white: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    black: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    red: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n    ],\n  };\n\n  constructor(private readonly rng: Prando = new Prando()) {}\n\n  white(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.white);\n  }\n\n  black(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.black);\n  }\n\n  red(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.red);\n  }\n}\n\nexport default (props: { dice: AttackDiceConfig; iterations: number }) => {\n  const data: number[] = [];\n  const rng = new DiceRng();\n  for (let i = 0; i < props.iterations; i++) {\n    let hits = 0;\n    const incrementIfHit = (side: AttackDiceSide) => {\n      if (side !== AttackDiceSide.blank && side !== AttackDiceSide.surge) {\n        hits++;\n      }\n    };\n    for (let w = 0; w < props.dice.white; w++) {\n      incrementIfHit(rng.white());\n    }\n    for (let b = 0; b < props.dice.black; b++) {\n      incrementIfHit(rng.black());\n    }\n    for (let r = 0; r < props.dice.red; r++) {\n      incrementIfHit(rng.red());\n    }\n    data.push(hits);\n  }\n  return (\n    <>\n      <Table\n        bordered\n        columns={[\n          { title: \"Type\", dataIndex: \"type\", width: 30, key: \"type\" },\n          { title: \"Hits\", dataIndex: \"hits\", width: 30, key: \"hits\" },\n          {\n            title: (\n              <>\n                <QuestionCircleOutlined />\n                &nbsp;Details\n              </>\n            ),\n            dataIndex: \"details\",\n            key: \"Details\",\n          },\n        ]}\n        dataSource={[\n          {\n            key: \"Mean\",\n            type: \"Mean\",\n            hits: stats.mean(data).toFixed(2),\n            details: (\n              <>\n                Known as the <em>average</em>, or the sum of all values over the\n                number of all values.\n              </>\n            ),\n          },\n          {\n            key: \"Mode\",\n            type: \"Mode\",\n            hits: stats.mode(data).toFixed(2),\n            details: (\n              <>\n                The{\" \"}\n                <a\n                  href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\"\n                  rel=\"_blank\"\n                  title=\"Learn more about the mode in statistics\"\n                >\n                  mode\n                </a>{\" \"}\n                is the most <em>commonly</em> seen result in the simulation.\n              </>\n            ),\n          },\n          {\n            key: \"Median\",\n            type: \"Median\",\n            hits: stats.median(data).toFixed(2),\n            details: (\n              <>\n                The{\" \"}\n                <a\n                  href=\"http://en.wikipedia.org/wiki/Median\"\n                  rel=\"_blank\"\n                  title=\"Learn more about the median in statistics\"\n                >\n                  median\n                </a>{\" \"}\n                is the middle number - useful when outliners skew the mean.\n              </>\n            ),\n          },\n          {\n            key: \"P50\",\n            type: \"P50\",\n            hits: stats.quantile(data, 1 - 0.5).toFixed(2),\n            details: <>50% of results will exceed this estimate.</>,\n          },\n          {\n            key: \"P90\",\n            type: \"P90\",\n            hits: stats.quantile(data, 1 - 0.9).toFixed(2),\n            details: <>90% of results will exceed this estimate.</>,\n          },\n        ]}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport GitInfo from \"react-git-info/macro\";\nimport { Layout, Card, Slider } from \"antd\";\nimport \"./App.scss\";\nimport { SimConfig, encodeConfig, decodeConfig } from \"./state/State\";\nimport { SettingOutlined, StarOutlined } from \"@ant-design/icons\";\nimport Pool from \"./ui/Pool\";\nimport Output from \"./ui/Output\";\n\nconst { Sider } = Layout;\n\nclass App extends React.Component<{}, SimConfig> {\n  private static readonly defaultState: SimConfig = {\n    attackPool: {\n      red: 1,\n      black: 1,\n      white: 1,\n    },\n    iterations: 10000,\n  };\n\n  private static readonly defaultEncodedState = encodeConfig(App.defaultState);\n  private static readonly shortHash = GitInfo().commit.shortHash;\n\n  constructor(props: {}) {\n    super(props);\n    this.state =\n      decodeConfig(window.location.hash) ||\n      JSON.parse(JSON.stringify(App.defaultState));\n  }\n\n  encodeStateIfChanged() {\n    const encodedState = encodeConfig(this.state);\n    if (encodedState === App.defaultEncodedState) {\n      window.location.hash = \"\";\n    } else {\n      window.location.hash = encodedState;\n    }\n  }\n\n  private iterationsToSlider(iterations: number): number {\n    console.log(iterations.toString().length - 1);\n    return iterations.toString().length - 1;\n  }\n\n  private slideToIterations(slider: number): number {\n    switch (slider) {\n      case 1:\n        return 10;\n      case 2:\n        return 100;\n      case 3:\n        return 1000;\n      case 4:\n        return 10000;\n      case 5:\n        return 100000;\n      default:\n        return App.defaultState.iterations;\n    }\n  }\n\n  render() {\n    this.encodeStateIfChanged();\n    return (\n      <Layout style={{ height: \"100vh\" }}>\n        <Sider breakpoint=\"lg\" collapsedWidth=\"0\" width=\"250px\">\n          <div className=\"logo\">RollCrits</div>\n          <Card\n            title={\n              <span>\n                <SettingOutlined />\n                <span> Settings</span>\n              </span>\n            }\n          >\n            Iterations\n            <Slider\n              min={1}\n              max={5}\n              marks={{\n                1: \"10\",\n                3: \"1000\",\n                5: \"100000\",\n              }}\n              value={this.iterationsToSlider(this.state.iterations)}\n              tipFormatter={this.slideToIterations.bind(this)}\n              onChange={(value) =>\n                this.setState({\n                  iterations: this.slideToIterations(value as number),\n                })\n              }\n            ></Slider>\n          </Card>\n          <Card\n            title={\n              <span>\n                <StarOutlined />\n                <span> Dice</span>\n              </span>\n            }\n          >\n            <Pool\n              dice={this.state.attackPool}\n              onChanged={(newDice) => {\n                this.setState({\n                  attackPool: newDice,\n                });\n              }}\n            />\n          </Card>\n        </Sider>\n        <Layout>\n          <Layout.Content style={{ margin: \"24px 16px 0\" }}>\n            <div className=\"content-module\">\n              <Output\n                dice={this.state.attackPool}\n                iterations={this.state.iterations}\n              />\n            </div>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}