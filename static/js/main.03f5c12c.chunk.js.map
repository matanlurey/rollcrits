{"version":3,"sources":["ui/Pool.tsx","app/simulation.ts","app/defenders.ts","ui/Output/Breakdown.tsx","ui/Output.tsx","ui/Modifiers.tsx","ui/IterationSlider.tsx","ui/SeedInput.tsx","ui/Tokens.tsx","app/config.ts","app/App.tsx","index.tsx"],"names":["DiceInput","props","Item","label","value","count","min","onChange","Number","isInteger","Pool","dice","this","labelCol","xs","span","sm","red","v","updateDice","black","white","newPool","onChanged","React","Component","AttackDieType","DefenseDieType","AttackDie","sides","order","rng","nextArrayItem","DefenseDie","AttackBranch","result","modifiers","tokens","results","soFar","modify","critical","surgeTokens","optimizeFor","rerollDice","roll","surge","i","length","shouldRerollHit","against","willCancel","cover","defender","dodge","highVelocity","outmanuever","guardian","armor","Math","max","hits","impact","map","e","crits","aggregateHits","aims","aim","applyAimToken","precise","aggregateDice","activatedDeflect","cancelCrits","deflect","convert","surges","DefenseBranch","pierce","stats","Array","fill","extraDice","concat","push","blocks","blanks","generateDefenseDice","vunerableToPierce","shield","shielded","wounds","Simulation","inputs","Prando","randomSeed","dicePool","attackPool","a","b","branches","iterations","generateAttackDice","d","sort","attackMods","attackTokens","presets","debug","name","standard","jedi","compareFloats","parseFloat","state","selectedRowKeys","defending","defenders","visualizing","data","woundsByCoverAmount","branch","expectedWounds","w","key","unit","cover0","toFixed","cover1","cover2","bordered","dataSource","pagination","size","title","dataIndex","sorter","compareStrings","render","query","hidden","tags","color","style","transform","CaretDownOutlined","renderTags","simulated","simulate","selected","grouped","before","buildGroup","rawTotalHits","prevProps","setState","animate","duration","height","domainPadding","x","colorScale","offset","buildTicks","index","y","labels","datum","axisLabel","padding","onSelect","mods","Option","Select","checked","slideToIterations","slider","marks","1","3","5","toString","tipFormatter","maxLength","target","icon","SyncOutlined","onClick","nextString","Config","mInputs","defaultInputs","path","window","location","pathname","split","splice","pool","from","matchAll","check","number","substring","amount","parseInt","_","readVars","globals","search","source","each","assignment","output","forEach","pair","encodeAttackPool","encodeAttackMods","encodeTokens","join","out","bag","k","encodeGenericBag","updater","mutateState","newInstance","Object","freeze","Sider","Layout","App","config","fromUrl","c","addEventListener","encodedState","encodeAsUrl","history","pushState","encodeStateIfChanged","setInputs","updateInputs","bind","minHeight","breakpoint","collapsedWidth","width","className","textAlign","shortHash","SlidersOutlined","layout","IterationSlider","Text","type","SeedInput","block","disabled","allowResetState","reset","StarOutlined","EditOutlined","Modifiers","AppstoreOutlined","Tokens","Content","margin","defaultConfigEncoded","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.03f5c12c.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { DicePool } from '../app/config';\n\nfunction DiceInput(props: {\n  label: React.ReactNode;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form\n        labelCol={{\n          xs: { span: 24 },\n          sm: { span: 12 },\n        }}\n      >\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<DicePool>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: DicePool;\n  readonly onChanged: (pool: DicePool) => void;\n}\n","import Prando from 'prando';\nimport { AttackModifiers, AttackTokens, Inputs } from './config';\n\n/**\n * Sides of an attack die.\n */\nexport type AttackDieSide = 'blank' | 'surge' | 'hit' | 'crit';\n/**\n * Sides of a defense die.\n */\nexport type DefenseDieSide = 'blank' | 'surge' | 'block';\n\n/**\n * Types of an attack die.\n */\nexport const AttackDieType: { [index: string]: AttackDieSide[] } = {\n  white: ['crit', 'surge', 'hit', 'blank', 'blank', 'blank', 'blank', 'blank'],\n  black: ['crit', 'surge', 'hit', 'hit', 'hit', 'blank', 'blank', 'blank'],\n  red: ['crit', 'surge', 'hit', 'hit', 'hit', 'hit', 'hit', 'blank'],\n};\n\n/**\n * Types of a defense die.\n */\nexport const DefenseDieType: { [index: string]: DefenseDieSide[] } = {\n  white: ['block', 'surge', 'blank', 'blank', 'blank', 'blank'],\n  red: ['block', 'block', 'block', 'surge', 'blank', 'blank'],\n};\n\n/**\n * Defines a single attack die.\n */\nexport class AttackDie {\n  static readonly red = new AttackDie(AttackDieType.red, 3);\n  static readonly black = new AttackDie(AttackDieType.black, 3);\n  static readonly white = new AttackDie(AttackDieType.white, 3);\n\n  private constructor(\n    private readonly sides: AttackDieSide[],\n    public readonly order: number,\n  ) {}\n\n  /**\n   * With the provided {rng}, changes the result of the die.\n   */\n  roll(rng: Prando): AttackDieSide {\n    return rng.nextArrayItem(this.sides);\n  }\n}\n\n/**\n * Defines a single defense die.\n */\nexport class DefenseDie {\n  static readonly red = new DefenseDie(DefenseDieType.red);\n  static readonly white = new DefenseDie(DefenseDieType.white);\n\n  private constructor(private readonly sides: DefenseDieSide[]) {}\n\n  /**\n   * With the provided {rng}, changes the result of the die.\n   */\n  roll(rng: Prando): DefenseDieSide {\n    return rng.nextArrayItem(this.sides);\n  }\n}\n\nexport interface DefenseStats {\n  /**\n   * How many extra dice are rolled.\n   */\n  extraDice?: number | { [key in 'white' | 'red']: number };\n\n  /**\n   * Type of defense die\n   */\n  dice: DefenseDie;\n\n  /**\n   * How many dodge tokens and dodge-related defensive bonuses.\n   */\n  dodge?:\n    | number\n    | {\n        deflect?: true;\n        outmanuever?: true;\n        tokens: number;\n      };\n\n  /**\n   * Number of hits that may be guardian-d away.\n   */\n  guardian?: number;\n\n  /**\n   * Set if the die surge-side is considered a block.\n   */\n  surges?: true | number;\n\n  /**\n   * Number of shield tokens.\n   */\n  shield?: number;\n\n  /**\n   * Set if numerical or unlimited armor.\n   */\n  armor?: number | true;\n\n  /**\n   * Set if immune to pierce or impervious to pierce.\n   */\n  pierce?: 'immune' | 'impervious';\n}\n\nexport class AttackBranch {\n  constructor(\n    private readonly rng: Prando,\n    private readonly result: Array<{ dice: AttackDie; roll: AttackDieSide }>,\n    private readonly modifiers: AttackModifiers,\n    private readonly tokens: AttackTokens,\n  ) {}\n\n  /**\n   * Mutates the provided array applying an \"aim\".\n   */\n  private applyAimToken(\n    results: Array<{ dice: AttackDie; roll: AttackDieSide }>,\n    soFar: { hits: number; crits: number },\n    modify: number,\n    critical: number,\n    surgeTokens: number,\n    optimizeFor?: {\n      cover: number;\n      defender: DefenseStats;\n    },\n  ): void {\n    const rerollDice = (result: { dice: AttackDie; roll: AttackDieSide }) => {\n      let roll = result.dice.roll(this.rng);\n\n      // TODO: Share code with aggregateDice.\n      if (roll === 'surge') {\n        if (critical) {\n          roll = 'crit';\n          critical--;\n        } else if (this.modifiers.surge === 'blank' && surgeTokens) {\n          roll = 'hit';\n          surgeTokens--;\n        } else {\n          roll = this.modifiers.surge;\n        }\n      }\n\n      result.roll = roll;\n      modify--;\n    };\n\n    // Assume the results are sorted where it goes RBW. First roll all blanks.\n    for (let i = 0; i < results.length; i++) {\n      if (!modify) {\n        break;\n      }\n      switch (results[i].roll) {\n        // Always re-roll blanks. Conversions already applied.\n        case 'blank':\n          rerollDice(results[i]);\n          break;\n      }\n    }\n\n    // If we aren't just going for a vanity stat, we might want to roll crits.\n    if (optimizeFor) {\n      for (let i = 0; i < results.length; i++) {\n        if (!modify) {\n          break;\n        }\n        switch (results[i].roll) {\n          // Next, re-roll hits, sometimes.\n          case 'hit':\n            if (this.shouldRerollHit(soFar, optimizeFor)) {\n              rerollDice(results[i]);\n            }\n            break;\n        }\n      }\n    }\n  }\n\n  // FYI: If we are entering this function, we have no blanks left.\n  private shouldRerollHit(\n    soFar: { hits: number; crits: number },\n    against: { cover: number; defender: DefenseStats },\n  ): boolean {\n    // If we have already maxed out our impact against armor, re-roll for crits.\n    let willCancel = against.cover;\n\n    if (against.defender.dodge && !this.modifiers.highVelocity) {\n      const dodge = against.defender.dodge;\n      if (typeof dodge === 'number') {\n        willCancel += dodge;\n      } else if (!dodge.outmanuever) {\n        willCancel += dodge.tokens;\n      }\n    }\n\n    if (against.defender.guardian) {\n      willCancel += against.defender.guardian;\n    }\n\n    if (against.defender.armor === true) {\n      willCancel += Math.max(0, soFar.hits - this.modifiers.impact);\n    }\n\n    // If cover/armor would cancel all our hits, re-roll for crits.\n    if (willCancel >= soFar.hits) {\n      return true;\n    }\n\n    // TODO: This function is far from optimal, and very confusing.\n    return false;\n  }\n\n  private aggregateDice(optimizeFor?: {\n    cover: number;\n    defender: DefenseStats;\n  }): { hits: number; crits: number } {\n    // Make a copy of the results.\n    const results = this.result.map((e) => {\n      return {\n        dice: e.dice,\n        roll: e.roll,\n      };\n    });\n\n    // Count tokens.\n    let critical = this.modifiers.critical;\n    let surgeTokens = this.tokens.surge;\n\n    // Aggregate total hits and crits at this point.\n    let hits = 0;\n    let crits = 0;\n\n    // May be called to aggregate the total hits/crits.\n    const aggregateHits = () => {\n      hits = 0;\n      crits = 0;\n      for (const result of results) {\n        switch (result.roll) {\n          case 'crit':\n            crits++;\n            break;\n          case 'hit':\n            hits++;\n            break;\n        }\n      }\n    };\n\n    // Reverse order, apply surges/critical to our worst dice (white) first.\n    for (let i = results.length - 1; i >= 0; i--) {\n      const result = results[i];\n      let { roll } = result;\n\n      if (roll === 'surge') {\n        if (critical) {\n          roll = 'crit';\n          critical--;\n        } else if (this.modifiers.surge === 'blank' && surgeTokens) {\n          roll = 'hit';\n          surgeTokens--;\n        } else {\n          roll = this.modifiers.surge;\n        }\n      }\n\n      result.roll = roll;\n    }\n\n    let aims = this.tokens.aim;\n    while (aims) {\n      // We'll need to know how many hits/crits so far.\n      aggregateHits();\n      this.applyAimToken(\n        results,\n        { hits, crits },\n        2 + this.modifiers.precise,\n        critical,\n        surgeTokens,\n        optimizeFor,\n      );\n      aims--;\n    }\n\n    // One final time.\n    aggregateHits();\n    return { hits, crits };\n  }\n\n  /**\n   * Returns the computed number of hits given cover and defense stats.\n   */\n  hits(cover: number, defender: DefenseStats): DefenseBranch {\n    let { hits, crits } = this.aggregateDice({\n      cover,\n      defender,\n    });\n\n    // Reduce hits by the amount of static cover, to a minimum of 0.\n    hits -= cover;\n\n    // Reduce hits or crits by the amount of dodges, to a minimum of 0.\n    let activatedDeflect = false;\n    if (defender.dodge && !this.modifiers.highVelocity) {\n      const dodge = defender.dodge;\n      let tokens: number;\n      let cancelCrits: boolean;\n      if (typeof dodge === 'number') {\n        tokens = dodge;\n        cancelCrits = false;\n      } else {\n        tokens = dodge.tokens;\n        cancelCrits = !!dodge.outmanuever;\n        if (dodge.deflect) {\n          activatedDeflect = true;\n        }\n      }\n      while (tokens) {\n        if (crits && cancelCrits) {\n          crits--;\n        } else {\n          hits--;\n        }\n        tokens--;\n      }\n    }\n\n    // Reduce hits by guardian.\n    hits -= defender.guardian || 0;\n\n    // Ensure neither hits or crits is < 0.\n    hits = Math.max(0, hits);\n    crits = Math.max(0, crits);\n\n    // If `armor`, convert hits to crits, and deplete all or some hits.\n    if (defender.armor) {\n      const convert = Math.min(hits, this.modifiers.impact);\n      hits -= convert;\n      crits += convert;\n\n      if (defender.armor === true) {\n        // All non-converted hits are now cancelled.\n        hits = 0;\n      } else {\n        // Reduce hits by the amount of static armor, to a minimum of 0.\n        hits = Math.max(0, hits - defender.armor);\n      }\n    }\n\n    // Final number of dice that will need to be rolled for wounds.\n    // TODO: Consider returning multiple branches per attack.\n    if (activatedDeflect) {\n      defender = {\n        ...defender,\n        surges: true,\n      };\n    }\n\n    return new DefenseBranch(\n      this.rng,\n      hits + crits,\n      defender,\n      this.modifiers.pierce,\n    );\n  }\n\n  get rawTotalHits(): number {\n    let { hits, crits } = this.aggregateDice();\n    return hits + crits;\n  }\n}\n\nexport class DefenseBranch {\n  constructor(\n    private readonly rng: Prando,\n    public readonly hits: number,\n    private readonly stats: DefenseStats,\n    private readonly pierce: number,\n  ) {}\n\n  /**\n   * Given the configuration, generates appropriate defense dice.\n   */\n  private generateDefenseDice(): DefenseDie[] {\n    let hits = this.hits;\n    if (this.stats.pierce === 'impervious') {\n      hits += this.pierce;\n    }\n    const result = Array(hits).fill(this.stats.dice);\n    if (this.stats.extraDice) {\n      const extraDice = this.stats.extraDice;\n      if (typeof extraDice === 'number') {\n        return result.concat(Array(extraDice).fill(this.stats.dice));\n      } else {\n        for (let i = 0; i < extraDice.white; i++) {\n          result.push(DefenseDie.white);\n        }\n        for (let i = 0; i < extraDice.red; i++) {\n          result.push(DefenseDie.red);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Computes the number of wounds based on rolling defensive dice.\n   */\n  wounds(): number {\n    let blocks = 0;\n    let blanks = 0;\n\n    for (const die of this.generateDefenseDice()) {\n      switch (die.roll(this.rng)) {\n        case 'block':\n          blocks++;\n          break;\n        case 'surge':\n          if (this.stats.surges) {\n            blocks++;\n          } else {\n            blanks++;\n          }\n          break;\n        case 'blank':\n          blanks++;\n          break;\n      }\n    }\n\n    const vunerableToPierce = this.stats.pierce !== 'immune';\n    if (this.pierce && vunerableToPierce) {\n      blocks = Math.max(0, blocks - this.pierce);\n    }\n\n    if (this.stats.shield && blanks) {\n      const shielded = Math.min(this.stats.shield, blanks);\n      blocks += shielded;\n      blanks -= shielded;\n    }\n\n    const wounds = this.hits - blocks;\n    return Math.max(0, wounds);\n  }\n}\n\n/**\n * Manages running the simulation from the top-down (as the root).\n */\nexport class Simulation {\n  private readonly rng: Prando;\n\n  constructor(private readonly inputs: Inputs) {\n    this.rng = new Prando(inputs.randomSeed);\n  }\n\n  /**\n   * Given the configuration, generates appropriate attack dice.\n   */\n  private generateAttackDice(): AttackDie[] {\n    const results: AttackDie[] = [];\n    const dicePool = this.inputs.attackPool;\n    for (let i = 0; i < dicePool.red; i++) {\n      results.push(AttackDie.red);\n    }\n    for (let i = 0; i < dicePool.black; i++) {\n      results.push(AttackDie.black);\n    }\n    for (let i = 0; i < dicePool.white; i++) {\n      results.push(AttackDie.white);\n    }\n    return results;\n  }\n\n  private staticSortDice(a: AttackDie, b: AttackDie) {}\n\n  /**\n   * Returns possible results of the simulation.\n   */\n  simulate(): AttackBranch[] {\n    const branches: AttackBranch[] = Array(this.inputs.iterations);\n    for (let i = 0; i < branches.length; i++) {\n      // Roll dice.\n      const results = this.generateAttackDice()\n        .map((d) => {\n          return {\n            dice: d,\n            roll: d.roll(this.rng),\n          };\n        })\n        .sort((a, b) => a.dice.order - b.dice.order);\n\n      branches[i] = new AttackBranch(\n        this.rng,\n        results,\n        this.inputs.attackMods,\n        this.inputs.attackTokens,\n      );\n    }\n    return branches;\n  }\n}\n","import { DefenseStats, DefenseDie } from './simulation';\nimport { DefenderPresetKeys } from './config';\n\nexport interface Defender extends DefenseStats {\n  name: string;\n}\n\nexport const presets: { [key in DefenderPresetKeys]: Defender[] } = {\n  // Not visible in the UI.\n  debug: [\n    {\n      name: 'BX Droid Commandos (2x Shields)',\n      dice: DefenseDie.red,\n      shield: 2,\n      pierce: 'impervious',\n    },\n  ],\n\n  // Show-cases units of different strength and stats.\n  standard: [\n    { name: 'B1 Battle Droid', dice: DefenseDie.white },\n    { name: 'B2 Super Battle Droid', dice: DefenseDie.white, armor: 1 },\n    { name: 'Rebel Trooper', dice: DefenseDie.white, surges: true },\n    { name: 'Stormtrooper', dice: DefenseDie.red },\n    { name: 'Deathtrooper', dice: DefenseDie.red, surges: true },\n    {\n      name: 'Boba Fett',\n      dice: DefenseDie.red,\n      surges: true,\n      pierce: 'impervious',\n    },\n    { name: 'Darth Vader', dice: DefenseDie.red, pierce: 'immune' },\n    {\n      name: 'Emperor Palpatine',\n      dice: DefenseDie.red,\n      pierce: 'immune',\n      surges: true,\n    },\n    { name: 'Rebel AT-RT', dice: DefenseDie.white, armor: true },\n    {\n      name: 'X-34 Landpseeder',\n      dice: DefenseDie.white,\n      surges: true,\n      armor: 2,\n    },\n    { name: 'AT-ST', dice: DefenseDie.white, surges: true, armor: true },\n    { name: 'Dewback Rider', dice: DefenseDie.red, armor: 1 },\n    { name: 'Occupier Tank', dice: DefenseDie.red, armor: true },\n  ],\n\n  // Show-cases units with danger sense or other similar defensive buffs.\n  'danger-sense': [\n    {\n      name: 'Rebel Troopers w/ Dodge',\n      dice: DefenseDie.white,\n      dodge: 1,\n      surges: true,\n    },\n    {\n      name: 'Rebel Pathfinders (DS1)',\n      dice: DefenseDie.white,\n      extraDice: 1,\n      surges: true,\n    },\n    {\n      name: 'Rebel Pathfinders (DS2)',\n      dice: DefenseDie.white,\n      extraDice: 2,\n      surges: true,\n    },\n    {\n      name: 'Rebel Pathfinders (DS3)',\n      dice: DefenseDie.white,\n      extraDice: 3,\n      surges: true,\n    },\n    {\n      name: 'Jyn Erso (DS4)',\n      dice: DefenseDie.white,\n      extraDice: 4,\n      surges: true,\n    },\n    {\n      name: 'Jyn Erso (DS4 + Dodge)',\n      dice: DefenseDie.white,\n      extraDice: 4,\n      dodge: 1,\n      surges: true,\n    },\n    {\n      name: 'BX Droid Commandos (2x Shields)',\n      dice: DefenseDie.red,\n      shield: 2,\n      pierce: 'impervious',\n    },\n    {\n      name: 'STAPs w/ Dodge',\n      dice: DefenseDie.white,\n      dodge: 1,\n    },\n    {\n      name: 'Tauntaun Riders w/ 2x Dodge',\n      dice: DefenseDie.white,\n      dodge: 2,\n      surges: true,\n    },\n    {\n      name: 'Droidekas (4x Shields)',\n      dice: DefenseDie.white,\n      surges: true,\n      shield: 4,\n    },\n    {\n      name: 'Iden Versio w/ Dodge+Shield',\n      dice: DefenseDie.red,\n      dodge: 1,\n      shield: 1,\n    },\n    {\n      name: 'Sabine w/ Dodge',\n      dice: DefenseDie.red,\n      surges: true,\n      dodge: 1,\n      pierce: 'impervious',\n    },\n    {\n      name: 'Sabine (Darksaber Melee) w/ Dodge',\n      dice: DefenseDie.red,\n      surges: true,\n      dodge: 1,\n      pierce: 'immune',\n    },\n    {\n      name: 'Saber Tank w/ Dodge',\n      dice: DefenseDie.red,\n      armor: true,\n      dodge: {\n        outmanuever: true,\n        tokens: 1,\n      },\n    },\n  ],\n\n  jedi: [\n    {\n      name: 'Luke Skywalker',\n      dice: DefenseDie.red,\n      pierce: 'immune',\n    },\n    {\n      name: 'Luke Skywalker w/ Dodge',\n      dice: DefenseDie.red,\n      dodge: {\n        deflect: true,\n        tokens: 1,\n      },\n      pierce: 'immune',\n    },\n    {\n      name: 'Luke Skywalker (Jedi) w/ Full of Surprises',\n      dice: DefenseDie.red,\n      extraDice: {\n        white: 4,\n        red: 0,\n      },\n      dodge: {\n        deflect: true,\n        tokens: 1,\n      },\n      pierce: 'immune',\n    },\n    {\n      name: 'Emperor Palpatine',\n      dice: DefenseDie.red,\n      surges: true,\n      pierce: 'immune',\n    },\n    {\n      name: 'Emperor Palpatine (Guardian 2)',\n      dice: DefenseDie.red,\n      surges: true,\n      guardian: 2,\n      pierce: 'immune',\n    },\n    {\n      name: 'General Grievous',\n      dice: DefenseDie.red,\n      pierce: 'impervious',\n    },\n    {\n      name: 'General Grievous (Guardian 4)',\n      dice: DefenseDie.red,\n      pierce: 'impervious',\n      guardian: 4,\n    },\n  ],\n\n  // Show-cases units that can take advantage of aggressive tactics.\n  'aggressive-tactics': [\n    {\n      name: 'B1 Battle Droid',\n      dice: DefenseDie.white,\n    },\n    {\n      name: 'B1 Battle Droid w/ Surge',\n      dice: DefenseDie.white,\n      surges: 1,\n    },\n    {\n      name: 'B2 Super Battle Droid',\n      dice: DefenseDie.white,\n      armor: 1,\n    },\n    {\n      name: 'B2 Super Battle Droid w/ Surge',\n      dice: DefenseDie.white,\n      surges: 1,\n      armor: 1,\n    },\n    {\n      name: 'Shoretroopers',\n      dice: DefenseDie.red,\n    },\n    {\n      name: 'Shoretroopers w/ Surge',\n      dice: DefenseDie.red,\n      surges: 1,\n    },\n    {\n      name: 'ARC Troopers w/ 1 Surge',\n      dice: DefenseDie.red,\n      surges: 1,\n      pierce: 'impervious',\n    },\n    {\n      name: 'ARC Troopers w/ 2 Surge',\n      dice: DefenseDie.red,\n      surges: 2,\n      pierce: 'impervious',\n    },\n    {\n      name: 'Darth Vader w/ 1 Surge',\n      dice: DefenseDie.red,\n      surges: 1,\n      pierce: 'immune',\n    },\n    {\n      name: 'Darth Vader w/ 2 Surge',\n      dice: DefenseDie.red,\n      surges: 2,\n      pierce: 'immune',\n    },\n    {\n      name: 'Occupier Tank',\n      dice: DefenseDie.red,\n      armor: true,\n    },\n    {\n      name: 'Occupier Tank w/ 1 Surge',\n      dice: DefenseDie.red,\n      armor: true,\n      surges: 1,\n    },\n  ],\n\n  // Show-cases a list with a significant amount of defensive buffs.\n  'rex-star': [\n    {\n      name: 'Phase IIs',\n      dice: DefenseDie.red,\n    },\n    {\n      name: 'Phase IIs w/ 1 Surge',\n      dice: DefenseDie.red,\n      surges: 1,\n    },\n    {\n      name: 'Phase IIs w/ 1 Surge + Dodge',\n      dice: DefenseDie.red,\n      surges: 1,\n      dodge: 1,\n    },\n    {\n      name: 'Phase IIs w/ 2 Surge + Dodge',\n      dice: DefenseDie.red,\n      surges: 2,\n      dodge: 1,\n    },\n    {\n      name: 'Phase IIs w/ 4 Surge + 2 Dodge',\n      dice: DefenseDie.red,\n      surges: 4,\n      dodge: 2,\n    },\n  ],\n};\n","import React from 'react';\nimport { Table, Row, Col, Tag } from 'antd';\nimport Media from 'react-media';\n\nimport './Breakdown.scss';\n\nimport * as stats from 'simple-statistics';\nimport { AttackBranch, DefenseDie, DefenseStats } from '../../app/simulation';\nimport ColumnGroup from 'antd/lib/table/ColumnGroup';\nimport Column from 'antd/lib/table/Column';\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport { DefenderPresetKeys } from '../../app/config';\nimport { presets } from '../../app/defenders';\n\ninterface Defender extends DefenseStats {\n  name: string;\n}\n\nfunction compareStrings(a: string, b: string) {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\n\nfunction compareFloats(a: string, b: string) {\n  return Number.parseFloat(a) - Number.parseFloat(b);\n}\n\ninterface BreakdownProps {\n  mods: {\n    impact: number;\n  };\n  data: AttackBranch[];\n  defenders: DefenderPresetKeys;\n  onSelect?: (\n    visualize: Array<{\n      name: string;\n      cover: number;\n      wounds: number[];\n    }>,\n  ) => void;\n}\n\nexport default class extends React.Component<\n  BreakdownProps,\n  { selectedRowKeys: string[] }\n> {\n  constructor(props: BreakdownProps) {\n    super(props);\n    this.state = {\n      selectedRowKeys: [],\n    };\n  }\n\n  render() {\n    // Aggregate results per defending unit.\n    const results: Array<{\n      key: string;\n      unit: Defender;\n      cover0: string;\n      cover1: string;\n      cover2: string;\n    }> = [];\n\n    const defending = presets[this.props.defenders];\n    const visualizing: Array<{\n      name: string;\n      cover: number;\n      wounds: number[];\n    }> = [];\n\n    if (this.props.data.length) {\n      for (const defender of defending) {\n        let woundsByCoverAmount: number[][] = [[], [], []];\n\n        // For each amount of cover.\n        for (let cover = 0; cover < woundsByCoverAmount.length; cover++) {\n          // For each attacking dice pool.\n          for (const branch of this.props.data) {\n            // Add the number of expected wounds (v cover + defender).\n            woundsByCoverAmount[cover].push(\n              branch.hits(cover, defender).wounds(),\n            );\n          }\n\n          visualizing.push({\n            name: defender.name,\n            cover: cover,\n            wounds: woundsByCoverAmount[cover],\n          });\n        }\n\n        const expectedWounds = woundsByCoverAmount.map((w) => stats.mean(w));\n        results.push({\n          key: defender.name,\n          unit: defender,\n          cover0: expectedWounds[0].toFixed(2),\n          cover1: expectedWounds[1].toFixed(2),\n          cover2: expectedWounds[2].toFixed(2),\n        });\n      }\n    }\n\n    // Add the expected hits independent of the defending unit.\n    /*\n\n      TODO: Re-add.\n      \n      rowSelection={{\n          selectedRowKeys: this.state.selectedRowKeys,\n          onChange: (selectedRowKeys: any) => {\n            const { onSelect } = this.props;\n            if (onSelect) {\n              const filtered = visualizing.filter((v) =>\n                _.includes(selectedRowKeys, v.name),\n              );\n              onSelect(filtered);\n            }\n            this.setState({ selectedRowKeys });\n          },\n        }}\n\n    */\n    return (\n      <Table bordered dataSource={results} pagination={false} size={'small'}>\n        <Column\n          title=\"Defending Unit\"\n          dataIndex=\"unit\"\n          key=\"unit\"\n          sorter={(a: Defender, b: Defender) => compareStrings(a.name, b.name)}\n          render={(unit: Defender) => (\n            <Row>\n              <Col span={24}>{unit.name}</Col>\n              {/* TODO: Use conditional rendering instead. */}\n              <Media\n                query=\"(min-width: 499px)\"\n                render={() => (\n                  <Col span={24} hidden={true}>\n                    {renderTags(unit)}\n                  </Col>\n                )}\n              />\n            </Row>\n          )}\n        />\n        <ColumnGroup title=\"Cover\">\n          <Column\n            title=\"0\"\n            dataIndex=\"cover0\"\n            key=\"cover0\"\n            sorter={(a: string, b: string) => compareFloats(a, b)}\n          />\n          <Column\n            title=\"1\"\n            dataIndex=\"cover1\"\n            key=\"cover1\"\n            sorter={(a: string, b: string) => compareFloats(a, b)}\n          />\n          <Column\n            title=\"2\"\n            dataIndex=\"cover2\"\n            key=\"cover2\"\n            sorter={(a: string, b: string) => compareFloats(a, b)}\n          />\n        </ColumnGroup>\n      </Table>\n    );\n  }\n}\n\nfunction renderTags(defender: DefenseStats): React.ReactElement {\n  const tags: React.ReactElement[] = [\n    <Tag\n      color={defender.dice === DefenseDie.red ? 'red' : 'default'}\n      key=\"dice\"\n      style={{ transform: 'scale(0.5) rotate(45deg)' }}\n    >\n      &nbsp;\n    </Tag>,\n  ];\n  if (defender.surges) {\n    tags.push(\n      <Tag\n        color={defender.dice === DefenseDie.red ? 'red' : 'default'}\n        key=\"surges\"\n      >\n        Surge: <CaretDownOutlined /> {/* Infinity */}\n      </Tag>,\n    );\n  }\n  if (defender.pierce) {\n    if (defender.pierce === 'impervious') {\n      tags.push(\n        <Tag color=\"volcano\" key=\"pierce\">\n          <span>Impervious</span>\n        </Tag>,\n      );\n    } else {\n      tags.push(\n        <Tag color=\"volcano\" key=\"pierce\">\n          Immune: Pierce\n        </Tag>,\n      );\n    }\n  }\n  if (defender.armor) {\n    if (defender.armor === true) {\n      tags.push(\n        <Tag color=\"magenta\" key=\"armor\">\n          Armor: <strong>&#8734;</strong>\n        </Tag>,\n      );\n    } else {\n      tags.push(\n        <Tag color=\"magenta\" key=\"armor\">\n          Armor: {defender.armor}\n        </Tag>,\n      );\n    }\n  }\n  return <>{tags}</>;\n}\n","import React from 'react';\nimport { VictoryChart, VictoryBar, VictoryAxis, VictoryGroup } from 'victory';\nimport Breakdown from './Output/Breakdown';\nimport { Simulation, AttackBranch } from '../app/simulation';\nimport { Inputs } from '../app/config';\n\nexport default class extends React.Component<\n  { simulate: Inputs },\n  {\n    simulated: AttackBranch[];\n    selected: Array<{\n      name: string;\n      cover: number;\n      wounds: number[];\n    }>;\n  }\n> {\n  constructor(props: { simulate: Inputs }) {\n    super(props);\n    this.state = {\n      simulated: new Simulation(this.props.simulate).simulate(),\n      selected: [],\n    };\n  }\n\n  private buildGroup(results: number[]): number[] {\n    const grouped: number[] = [];\n    for (const wounds of results) {\n      const before = grouped[wounds] || 0;\n      grouped[wounds] = before + 1;\n    }\n    return grouped;\n  }\n\n  private buildTicks(results: AttackBranch[]): number[] {\n    return this.buildGroup(results.map((v) => v.rawTotalHits));\n  }\n\n  componentDidUpdate(prevProps: { simulate: Inputs }): void {\n    if (prevProps.simulate !== this.props.simulate) {\n      this.setState({\n        simulated: new Simulation(this.props.simulate).simulate(),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <VictoryChart\n          animate={{ duration: 2000 }}\n          height={200}\n          domainPadding={{ x: 25 }}\n        >\n          <VictoryGroup colorScale={'qualitative'} offset={20}>\n            {this.state.selected.length === 0 ? (\n              <VictoryBar\n                data={this.buildTicks(this.state.simulated).map(\n                  (value, index) => {\n                    return {\n                      x: `${index}`,\n                      y: value,\n                    };\n                  },\n                )}\n                labels={({ datum }) =>\n                  `${((datum.y / this.state.simulated.length) * 100).toFixed(\n                    0,\n                  )}%`\n                }\n                style={{\n                  data: {\n                    fill: 'tomato',\n                  },\n                }}\n                key=\"Expected Hits\"\n              />\n            ) : (\n              <></>\n            )}\n          </VictoryGroup>\n          <VictoryAxis\n            label={\n              this.state.selected.length\n                ? 'Comparing Wounds'\n                : 'Aggregate Expected Hits'\n            }\n            style={{\n              axisLabel: { padding: 30 },\n            }}\n          />\n        </VictoryChart>\n        <Breakdown\n          data={this.state.simulated}\n          defenders={this.props.simulate.defenders}\n          onSelect={() => {\n            // TODO: Implment.\n          }}\n          mods={{\n            impact: this.props.simulate.attackMods.impact,\n          }}\n        />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Form, Select, InputNumber, Divider, Switch } from 'antd';\nimport { AttackModifiers } from '../app/config';\n\nconst { Option } = Select;\n\nexport default (props: {\n  modifiers: AttackModifiers;\n  onChanged: (newModifiers: AttackModifiers) => void;\n}) => {\n  return (\n    <Form\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 12 },\n      }}\n    >\n      <Form.Item label=\"Surge\">\n        <Select\n          value={props.modifiers.surge}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              surge: value,\n            });\n          }}\n        >\n          <Option value={'blank'}>None</Option>\n          <Option value={'hit'}>Hit</Option>\n          <Option value={'crit'}>Crit</Option>\n        </Select>\n      </Form.Item>\n      <Divider />\n      <Form.Item label=\"Critical\">\n        <InputNumber\n          value={props.modifiers.critical}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              critical: value === 0 ? 0 : value || props.modifiers.critical,\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item label=\"High Velocity\">\n        <Switch\n          checked={props.modifiers.highVelocity}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              highVelocity: value,\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item label=\"Impact\">\n        <InputNumber\n          value={props.modifiers.impact}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              impact: value === 0 ? 0 : value || props.modifiers.impact,\n            });\n          }}\n        />\n      </Form.Item>\n      {/*\n        TODO: Enable.\n\n        <Form.Item label=\"Marksman\">\n          <Switch\n            checked={props.modifiers.marksman}\n            onChange={(value) => {\n              props.onChanged({\n                ...props.modifiers,\n                marksman: value,\n              });\n            }}\n          />\n        </Form.Item>\n      */}\n      <Form.Item label=\"Pierce\">\n        <InputNumber\n          value={props.modifiers.pierce}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              pierce: value === 0 ? 0 : value || props.modifiers.pierce,\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item label=\"Precise\">\n        <InputNumber\n          value={props.modifiers.precise}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              precise: value === 0 ? 0 : value || props.modifiers.precise,\n            });\n          }}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Slider } from 'antd';\n\nfunction iterationsToSlider(iterations: number): number {\n  return iterations.toString().length - 1;\n}\n\nfunction slideToIterations(slider: number): number {\n  switch (slider) {\n    case 1:\n      return 10;\n    case 2:\n      return 100;\n    case 3:\n      return 1000;\n    case 4:\n      return 10000;\n    case 5:\n      return 100000;\n    // TODO: Log.\n    default:\n      return 10000;\n  }\n}\n\nexport default function (props: {\n  value: number;\n  onChanged: (value: number) => void;\n}) {\n  return (\n    <Slider\n      min={1}\n      max={5}\n      marks={{\n        1: '10',\n        3: '1000',\n        5: '100000',\n      }}\n      value={iterationsToSlider(props.value)}\n      tipFormatter={slideToIterations}\n      onChange={(value) => props.onChanged(slideToIterations(value as number))}\n    ></Slider>\n  );\n}\n","import React from 'react';\nimport { Row, Col, Input, Button } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport Prando from 'prando';\n\nexport default function (props: {\n  value: string;\n  onChanged: (value: string) => void;\n}) {\n  return (\n    <Row>\n      <Col span={18}>\n        <Input\n          value={props.value}\n          maxLength={10}\n          onChange={(v) => props.onChanged(v.target.value)}\n        />\n      </Col>\n      <Col span={2} offset={2}>\n        <Button\n          icon={<SyncOutlined />}\n          title=\"Randomize\"\n          onClick={() => props.onChanged(new Prando().nextString(10))}\n        />\n      </Col>\n    </Row>\n  );\n}\n","import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { AttackTokens } from '../app/config';\n\nexport default (props: {\n  tokens: AttackTokens;\n  onChanged: (newModifiers: AttackTokens) => void;\n}) => {\n  return (\n    <Form\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 12 },\n      }}\n    >\n      <Form.Item label=\"Aim\">\n        <InputNumber\n          value={props.tokens.aim}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.tokens,\n              aim: value === 0 ? 0 : value || props.tokens.aim,\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item label=\"Surge\">\n        <InputNumber\n          value={props.tokens.surge}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.tokens,\n              surge: value === 0 ? 0 : value || props.tokens.surge,\n            });\n          }}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n","// Simulation-wide configuraton (state).\n\nimport * as _ from 'lodash';\nimport Prando from 'prando';\n\nexport class Config {\n  private static readonly defaultInputs = Object.freeze({\n    attackMods: Object.freeze({\n      critical: 0,\n      highVelocity: false,\n      impact: 0,\n      pierce: 0,\n      precise: 0,\n      surge: 'blank',\n    }),\n    attackPool: Object.freeze({\n      red: 1,\n      black: 1,\n      white: 1,\n    }),\n    attackTokens: Object.freeze({\n      aim: 0,\n      surge: 0,\n    }),\n    defenders: 'standard',\n    iterations: 10000,\n    randomSeed: new Prando().nextString(10),\n  }) as Inputs;\n\n  static fromUrl(onChanged: (config: Config) => void): Config {\n    const path = window.location.pathname.split('/').splice(1);\n    let pool: DicePool = {\n      red: 0,\n      black: 0,\n      white: 0,\n    };\n    if (path[0] && path[0] !== 'none') {\n      for (const match of Array.from(path[0].matchAll(/\\d*[rbw]/g))) {\n        const check = match[0];\n        const color = check[check.length - 1];\n        const number = check.substring(0, check.length - 1);\n        const amount = Number.parseInt(number) || 0;\n        switch (color) {\n          case 'r':\n            pool.red = amount;\n            break;\n          case 'b':\n            pool.black = amount;\n            break;\n          case 'w':\n            pool.white = amount;\n            break;\n        }\n      }\n    } else {\n      pool = _.cloneDeep(Config.defaultInputs.attackPool);\n    }\n    const mods: AttackModifiers = {\n      ..._.cloneDeep(Config.defaultInputs.attackMods),\n      ...Config.readVars(path[1], ',', ':'),\n    };\n    const tokens: AttackTokens = {\n      ..._.cloneDeep(Config.defaultInputs.attackTokens),\n      ...Config.readVars(path[2], ',', ':'),\n    };\n    const globals = {\n      iterations: Config.defaultInputs.iterations,\n      randomSeed: Config.defaultInputs.randomSeed,\n      defenders: Config.defaultInputs.defenders,\n      ...Config.readVars(window.location.search, '&', '='),\n    };\n    return new Config(onChanged, {\n      attackMods: mods,\n      attackPool: pool,\n      attackTokens: tokens,\n      ...globals,\n    });\n  }\n\n  private static readVars(\n    source: string | undefined,\n    each: string,\n    assignment: string,\n  ): {} {\n    const output: { [index: string]: string | number | boolean } = {};\n    if (!source) {\n      return output;\n    }\n    source\n      .split(each)\n      .map((v) => v.split(assignment))\n      .forEach((pair) => {\n        const key: string = pair[0];\n        const value: string | number | boolean = pair[1];\n        output[key] = value;\n      });\n    return output;\n  }\n\n  constructor(\n    private readonly onChanged: (config: Config) => void,\n    private mInputs: Inputs = Config.defaultInputs,\n  ) {}\n\n  /**\n   * Returns the configuration stored as a URL path.\n   */\n  encodeAsUrl(): string {\n    // 'attack-pool'/'attack-mods'/'attack-tokens'?iterations=X&randomSeed=X\n    return (\n      [\n        // attack-pool\n        this.encodeAttackPool(),\n        // attack-mods\n        this.encodeAttackMods(),\n        // attack-tokens\n        this.encodeTokens(),\n      ].join('/') +\n      '?' +\n      [\n        `iterations=${this.mInputs.iterations}`,\n        `defenders=${this.mInputs.defenders}`,\n        `randomSeed=${this.mInputs.randomSeed}`,\n      ].join('&')\n    );\n  }\n\n  private encodeAttackPool(): string {\n    const out: string[] = [];\n    const dice = this.mInputs.attackPool;\n    if (dice.red) {\n      out.push(`${dice.red}r`);\n    }\n    if (dice.black) {\n      out.push(`${dice.black}b`);\n    }\n    if (dice.white) {\n      out.push(`${dice.white}w`);\n    }\n    if (out.length === 0) {\n      return 'none';\n    } else {\n      return out.join('');\n    }\n  }\n\n  private encodeGenericBag(bag: { [index: string]: any }): string {\n    const out: string[] = [];\n    _.forOwn(bag, (v: any, k: string) => {\n      if (v) {\n        out.push(`${k}:${v}`);\n      }\n    });\n    return out.join(',');\n  }\n\n  private encodeAttackMods(): string {\n    return this.encodeGenericBag(this.mInputs.attackMods);\n  }\n\n  private encodeTokens(): string {\n    return this.encodeGenericBag(this.mInputs.attackTokens);\n  }\n\n  /**\n   * A copy of the inputs to the simulation.\n   */\n  get inputs(): Inputs {\n    return _.cloneDeep(this.mInputs);\n  }\n\n  /**\n   * Notifies the listening component to update.\n   */\n  updateInputs(updater: (mutate: Inputs) => void) {\n    const mutateState = this.inputs;\n    updater(mutateState);\n    const newInstance = new Config(this.onChanged, mutateState);\n    this.onChanged(newInstance);\n  }\n\n  /**\n   * Resets back to the original state.\n   *\n   * TODO: Should this reset back to the original URL state?\n   */\n  reset(): void {\n    const newInstance = new Config(this.onChanged);\n    this.onChanged(newInstance);\n  }\n}\n\nexport interface Inputs {\n  /**\n   * Keywords or abilities that augment the dice pool.\n   */\n  attackMods: AttackModifiers;\n\n  /**\n   * Dice being rolled.\n   */\n  attackPool: DicePool;\n\n  /**\n   * Tokens that may be spent by the attacker.\n   */\n  attackTokens: AttackTokens;\n\n  /**\n   * Defending units.\n   */\n  defenders: DefenderPresetKeys;\n\n  /**\n   * The number of times to roll each attack (per defender/cover, etc).\n   */\n  iterations: number;\n\n  /**\n   * The RNG seed used for rolling dice.\n   */\n  randomSeed: string;\n}\n\n/**\n * Built-in presets of defenders to test against.\n */\nexport type DefenderPresetKeys =\n  | 'standard'\n  | 'danger-sense'\n  | 'aggressive-tactics'\n  | 'jedi'\n  | 'rex-star'\n  | 'debug';\n\nexport interface DicePool {\n  red: number;\n  black: number;\n  white: number;\n}\n\nexport interface AttackModifiers {\n  /**\n   * Converts up to X {@link AttackDieSide.surge} to {@link AttackDieSide.crit}.\n   */\n  critical: number;\n\n  /**\n   * Whether to prevent spending dodge tokens.\n   */\n  highVelocity: boolean;\n\n  /**\n   * Allows penetrating/ignoring the \"armor\" keyword.\n   *\n   * When a defender has \"armor\", converts up to X {@link AttackDieSide.hit} to\n   * {@link AttackDieSide.crit} after the \"apply-dodge-and-cover\" phase (but\n   * before armor would cancel the hits).\n   */\n  impact: number;\n\n  /**\n   * Cancels up to {@link DefenseDieSide.block}s.\n   */\n  pierce: number;\n\n  /**\n   * When spending an aim token, you may re-roll up to X additional dice.\n   */\n  precise: number;\n\n  /**\n   * If {@link AttackDieSide.surge}, what the die side should be converted to.\n   */\n  surge: 'blank' | 'hit' | 'crit';\n}\n\nexport interface AttackTokens {\n  /**\n   * May spend a token to re-roll up to 2+{@link AttackModifiers.precise} dice.\n   */\n  aim: number;\n\n  /**\n   * Spend to convert {@link AttackDieSide.surge} to {@link AttackDieSide.hit}.\n   */\n  surge: number;\n}\n","import React from 'react';\nimport GitInfo from 'react-git-info/macro';\nimport { Layout, Card, Form, Button, Row, Col, Select, Typography } from 'antd';\nimport {\n  StarOutlined,\n  EditOutlined,\n  AppstoreOutlined,\n  SlidersOutlined,\n} from '@ant-design/icons';\n\nimport './App.scss';\n\nimport Pool from '../ui/Pool';\nimport Output from '../ui/Output';\nimport Modifiers from '../ui/Modifiers';\nimport IterationSlider from '../ui/IterationSlider';\nimport SeedInput from '../ui/SeedInput';\nimport Tokens from '../ui/Tokens';\nimport { Config } from './config';\n\nconst { Sider } = Layout;\n\nclass App extends React.Component<{}, { config: Config }> {\n  private static readonly defaultConfigEncoded = new Config(\n    (_) => {},\n  ).encodeAsUrl();\n  private static readonly shortHash = GitInfo().commit.shortHash;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      config: Config.fromUrl((c) => {\n        this.setState({ config: c });\n      }),\n    };\n    window.addEventListener('popstate', (e) => {\n      this.setState({\n        config: Config.fromUrl((c) => {\n          this.setState({ config: c });\n        }),\n      });\n      return false;\n    });\n  }\n\n  private get allowResetState(): boolean {\n    const encodedState = this.state.config.encodeAsUrl();\n    return encodedState !== App.defaultConfigEncoded;\n  }\n\n  private encodeStateIfChanged() {\n    const encodedState = this.state.config.encodeAsUrl();\n    const currentState = `${window.location.pathname}${window.location.search}`;\n    if (encodedState !== currentState) {\n      window.history.pushState({}, '', `/${encodedState}`);\n    }\n  }\n\n  render() {\n    this.encodeStateIfChanged();\n    const config = this.state.config;\n    const inputs = config.inputs;\n    const setInputs = config.updateInputs.bind(this.state.config);\n    return (\n      <Layout style={{ minHeight: '100vh', height: '100%' }}>\n        <Sider\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          width=\"250px\"\n          style={{ minHeight: '100vh', height: '100%' }}\n        >\n          <div className=\"logo\">\n            <Row>\n              <Col span={10}>\n                <strong>RollCrits</strong>\n              </Col>\n              <Col span={12} style={{ textAlign: 'right' }}>\n                #{App.shortHash}\n              </Col>\n            </Row>\n          </div>\n          <Card\n            title={\n              <span>\n                <SlidersOutlined />\n                <span> Simulation</span>\n              </span>\n            }\n          >\n            <Form layout=\"vertical\">\n              <Form.Item label=\"Iterations\">\n                <IterationSlider\n                  value={inputs.iterations}\n                  onChanged={(v) => setInputs((i) => (i.iterations = v))}\n                />\n              </Form.Item>\n              <Form.Item label=\"Defenders\">\n                <Select\n                  value={inputs.defenders}\n                  onChange={(v) => setInputs((i) => (i.defenders = v))}\n                >\n                  <Select.Option value=\"standard\">\n                    <div>Standard</div>\n                    <Typography.Text type=\"secondary\">\n                      A wide array of units.\n                    </Typography.Text>\n                  </Select.Option>\n                  <Select.Option value=\"danger-sense\">\n                    <div>Danger Sense</div>\n                    <Typography.Text type=\"secondary\">\n                      Unusual defensive buffs.\n                    </Typography.Text>\n                  </Select.Option>\n                  <Select.Option value=\"aggressive-tactics\">\n                    <div>Aggressive Tactics</div>\n                    <Typography.Text type=\"secondary\">\n                      Defensive surge tokens.\n                    </Typography.Text>\n                  </Select.Option>\n                  <Select.Option value=\"jedi\">\n                    <div>Jedi</div>\n                    <Typography.Text type=\"secondary\">\n                      Deflect and Guardian.\n                    </Typography.Text>\n                  </Select.Option>\n                  <Select.Option value=\"rex-star\">\n                    <div>Rex Star</div>\n                    <Typography.Text type=\"secondary\">\n                      Unusual amount of tokens.\n                    </Typography.Text>\n                  </Select.Option>\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"RNG Seed\">\n                <SeedInput\n                  value={inputs.randomSeed}\n                  onChanged={(v) => setInputs((i) => (i.randomSeed = v))}\n                />\n              </Form.Item>\n              <Row>\n                <Col span={24}>\n                  <Button\n                    block\n                    disabled={!this.allowResetState}\n                    type=\"danger\"\n                    onClick={() => {\n                      config.reset();\n                    }}\n                  >\n                    Reset\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          </Card>\n          <Card\n            title={\n              <span>\n                <StarOutlined />\n                <span> Dice</span>\n              </span>\n            }\n          >\n            <Pool\n              dice={inputs.attackPool}\n              onChanged={(v) => setInputs((i) => (i.attackPool = v))}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <EditOutlined />\n                <span> Modifiers</span>\n              </span>\n            }\n          >\n            <Modifiers\n              modifiers={inputs.attackMods}\n              onChanged={(v) => setInputs((i) => (i.attackMods = v))}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <AppstoreOutlined />\n                <span> Tokens</span>\n              </span>\n            }\n          >\n            <Tokens\n              tokens={inputs.attackTokens}\n              onChanged={(v) => setInputs((i) => (i.attackTokens = v))}\n            />\n          </Card>\n        </Sider>\n        <Layout>\n          <Layout.Content style={{ margin: '24px 16px 0' }}>\n            <div className=\"content-module\">\n              <Output simulate={inputs} />\n            </div>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}