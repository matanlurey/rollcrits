{"version":3,"sources":["ui/Output.tsx","ui/Pool.tsx","App.tsx","index.tsx"],"names":["AttackDiceSide","DiceRng","rng","Prando","this","nextArrayItem","table","white","black","red","crit","surge","hit","blank","props","data","i","hits","incrementIfHit","side","w","dice","b","r","push","iterations","bordered","columns","title","dataIndex","width","key","QuestionCircleOutlined","dataSource","type","stats","toFixed","details","href","rel","DiceInput","Item","label","value","count","min","onChange","Number","isInteger","Pool","layout","v","updateDice","newPool","onChanged","React","Component","Header","Layout","Content","Footer","Panel","Collapse","App","state","className","style","padding","span","defaultActiveKey","header","setState","Output","ReactDOM","render","document","getElementById"],"mappings":"qMAOKA,E,4KAAAA,O,iBAAAA,I,iBAAAA,I,aAAAA,I,gBAAAA,M,SAOCC,E,WAoCJ,aAA0D,IAA7BC,EAA4B,uDAAd,IAAIC,IAAU,yBAA5BD,M,oDAG3B,OAAOE,KAAKF,IAAIG,cAAcJ,EAAQK,MAAMC,S,8BAI5C,OAAOH,KAAKF,IAAIG,cAAcJ,EAAQK,MAAME,S,4BAI5C,OAAOJ,KAAKF,IAAIG,cAAcJ,EAAQK,MAAMG,S,KA/C1CR,EACoBK,MAAQ,CAC9BC,MAAO,CACLP,EAAeU,KACfV,EAAeW,MACfX,EAAeY,IACfZ,EAAea,MACfb,EAAea,MACfb,EAAea,MACfb,EAAea,MACfb,EAAea,OAGjBL,MAAO,CACLR,EAAeU,KACfV,EAAeW,MACfX,EAAeY,IACfZ,EAAeY,IACfZ,EAAeY,IACfZ,EAAea,MACfb,EAAea,MACfb,EAAea,OAGjBJ,IAAK,CACHT,EAAeU,KACfV,EAAeW,MACfX,EAAeY,IACfZ,EAAeY,IACfZ,EAAeY,IACfZ,EAAeY,IACfZ,EAAeY,IACfZ,EAAea,QAmBN,eAACC,GAGd,IAFA,IAAMC,EAAiB,GACjBb,EAAM,IAAID,EAFgD,WAGvDe,GAOP,IANA,IAAIC,EAAO,EACLC,EAAiB,SAACC,GAClBA,IAASnB,EAAea,OAASM,IAASnB,EAAeW,OAC3DM,KAGKG,EAAI,EAAGA,EAAIN,EAAMO,KAAKd,MAAOa,IACpCF,EAAehB,EAAIK,SAErB,IAAK,IAAIe,EAAI,EAAGA,EAAIR,EAAMO,KAAKb,MAAOc,IACpCJ,EAAehB,EAAIM,SAErB,IAAK,IAAIe,EAAI,EAAGA,EAAIT,EAAMO,KAAKZ,IAAKc,IAClCL,EAAehB,EAAIO,OAErBM,EAAKS,KAAKP,IAhBHD,EAAI,EAAGA,EAAIF,EAAMW,WAAYT,IAAM,IAkB5C,OACE,kBAAC,IAAD,CACEU,UAAQ,EACRC,QAAS,CACP,CAAEC,MAAO,OAAQC,UAAW,OAAQC,MAAO,GAAIC,IAAK,QACpD,CAAEH,MAAO,OAAQC,UAAW,OAAQC,MAAO,GAAIC,IAAK,QACpD,CACEH,MACE,oCACE,kBAACI,EAAA,EAAD,MADF,eAKFH,UAAW,UACXE,IAAK,YAGTE,WAAY,CACV,CACEF,IAAK,OACLG,KAAM,OACNjB,KAAMkB,OAAWpB,GAAMqB,QAAQ,GAC/BC,QACE,oDACe,uCADf,8DAMJ,CACEN,IAAK,OACLG,KAAM,OACNjB,KAAMkB,OAAWpB,GAAMqB,QAAQ,GAC/BC,QACE,0CACM,IACJ,uBACEC,KAAK,kDACLC,IAAI,SACJX,MAAM,2CAHR,QAMK,IARP,eASc,wCATd,oCAaJ,CACEG,IAAK,SACLG,KAAM,SACNjB,KAAMkB,SAAapB,GAAMqB,QAAQ,GACjCC,QACE,0CACM,IACJ,uBACEC,KAAK,sCACLC,IAAI,SACJX,MAAM,6CAHR,UAMK,IARP,gEAaJ,CACEG,IAAK,MACLG,KAAM,MACNjB,KAAMkB,WAAepB,EAAM,IAASqB,QAAQ,GAC5CC,QAAS,kFAEX,CACEN,IAAK,MACLG,KAAM,MACNjB,KAAMkB,WAAepB,EAAM,EAAI,IAAKqB,QAAQ,GAC5CC,QAAS,sF,SC9JnB,SAASG,EAAU1B,GAKjB,OACE,kBAAC,IAAK2B,KAAN,CAAWC,MAAO5B,EAAM4B,OACtB,kBAAC,IAAD,CACEC,MAAO7B,EAAM8B,MACbC,IAAK,EACLC,SAAU,WAAgB,IAAfH,EAAc,uDAAN,EACjB7B,EAAMgC,SAASC,OAAOC,UAAUL,GAASA,EAAQ7B,EAAM8B,W,IAO5CK,E,uKACT,IAAD,OACD5B,EAAOjB,KAAKU,MAAMO,KACxB,OACE,kBAAC,IAAD,CAAM6B,OAAO,UACX,kBAACV,EAAD,CACEE,MAAM,MACNE,MAAOvB,EAAKZ,IACZqC,SAAU,SAACK,GAAD,OAAe,EAAKC,WAAW,CAAE3C,IAAK0C,OAElD,kBAACX,EAAD,CACEE,MAAM,QACNE,MAAOvB,EAAKb,MACZsC,SAAU,SAACK,GAAD,OAAe,EAAKC,WAAW,CAAE5C,MAAO2C,OAEpD,kBAACX,EAAD,CACEE,MAAM,QACNE,MAAOvB,EAAKd,MACZuC,SAAU,SAACK,GAAD,OAAe,EAAKC,WAAW,CAAE7C,MAAO4C,U,iCAM/CE,GACTjD,KAAKU,MAAMwC,UAAX,eAA0BlD,KAAKU,MAAMO,KAArC,GAA8CgC,Q,GAzBhBE,IAAMC,WCbhCC,G,OAA4BC,IAA5BD,QAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OACjBC,EAAUC,IAAVD,MAkEOE,E,kDA/Db,WAAYjD,GAAY,IAAD,8BACrB,cAAMA,IACDkD,MAAQ,CACX3C,KAAM,CACJZ,IAAK,EACLD,MAAO,EACPD,MAAO,GAETkB,WAAY,KARO,E,qDAYb,IAAD,OACP,OACE,kBAAC,IAAD,CAAQwC,UAAU,UAChB,kBAACR,EAAD,KACE,yBAAKQ,UAAU,QAAf,sBAEF,kBAACN,EAAD,CAASM,UAAU,eAAeC,MAAO,CAAEC,QAAS,cAClD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKF,UAAU,iBAAiBG,KAAM,IACpC,kBAAC,IAAD,CAAUC,iBAAkB,CAAC,EAAG,EAAG,EAAG,IACpC,kBAACR,EAAD,CAAOS,OAAO,WAAWvC,IAAI,KAC3B,kBAAC,IAAD,CAAMmB,OAAO,UACX,kBAAC,IAAKT,KAAN,CAAWC,MAAM,cACf,kBAAC,IAAD,CACEC,MAAOvC,KAAK4D,MAAMvC,WAClBqB,SAAU,eAACK,EAAD,uDAAK,EAAL,OAAW,EAAKoB,SAAS,CAAE9C,WAAY0B,UAKzD,kBAACU,EAAD,CAAOS,OAAO,YAAYvC,IAAI,KAC5B,kBAAC,EAAD,CACEV,KAAMjB,KAAK4D,MAAM3C,KACjBiC,UAAW,SAACjC,GACV,EAAKkD,SAAS,CACZlD,KAAMA,UAOlB,kBAAC,IAAD,CAAK4C,UAAU,iBAAiBG,KAAM,IACpC,kBAACI,EAAD,CACEnD,KAAMjB,KAAK4D,MAAM3C,KACjBI,WAAYrB,KAAK4D,MAAMvC,gBAK/B,kBAACmC,EAAD,W,GArDUL,IAAMC,WCNxBiB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.bf9944ba.chunk.js","sourcesContent":["import React from \"react\";\nimport Prando from \"prando\";\nimport { Table } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { DicePool } from \"./Pool\";\nimport * as stats from \"simple-statistics\";\n\nenum AttackDiceSide {\n  blank,\n  surge,\n  hit,\n  crit,\n}\n\nclass DiceRng {\n  private static readonly table = {\n    white: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    black: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    red: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n    ],\n  };\n\n  constructor(private readonly rng: Prando = new Prando()) {}\n\n  white(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.white);\n  }\n\n  black(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.black);\n  }\n\n  red(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.red);\n  }\n}\n\nexport default (props: { dice: DicePool; iterations: number }) => {\n  const data: number[] = [];\n  const rng = new DiceRng();\n  for (let i = 0; i < props.iterations; i++) {\n    let hits = 0;\n    const incrementIfHit = (side: AttackDiceSide) => {\n      if (side !== AttackDiceSide.blank && side !== AttackDiceSide.surge) {\n        hits++;\n      }\n    };\n    for (let w = 0; w < props.dice.white; w++) {\n      incrementIfHit(rng.white());\n    }\n    for (let b = 0; b < props.dice.black; b++) {\n      incrementIfHit(rng.black());\n    }\n    for (let r = 0; r < props.dice.red; r++) {\n      incrementIfHit(rng.red());\n    }\n    data.push(hits);\n  }\n  return (\n    <Table\n      bordered\n      columns={[\n        { title: \"Type\", dataIndex: \"type\", width: 30, key: \"type\" },\n        { title: \"Hits\", dataIndex: \"hits\", width: 30, key: \"hits\" },\n        {\n          title: (\n            <>\n              <QuestionCircleOutlined />\n              &nbsp;Details\n            </>\n          ),\n          dataIndex: \"details\",\n          key: \"Details\",\n        },\n      ]}\n      dataSource={[\n        {\n          key: \"Mean\",\n          type: \"Mean\",\n          hits: stats.mean(data).toFixed(2),\n          details: (\n            <>\n              Known as the <em>average</em>, or the sum of all values over the\n              number of all values.\n            </>\n          ),\n        },\n        {\n          key: \"Mode\",\n          type: \"Mode\",\n          hits: stats.mode(data).toFixed(2),\n          details: (\n            <>\n              The{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\"\n                rel=\"_blank\"\n                title=\"Learn more about the mode in statistics\"\n              >\n                mode\n              </a>{\" \"}\n              is the most <em>commonly</em> seen result in the simulation.\n            </>\n          ),\n        },\n        {\n          key: \"Median\",\n          type: \"Median\",\n          hits: stats.median(data).toFixed(2),\n          details: (\n            <>\n              The{\" \"}\n              <a\n                href=\"http://en.wikipedia.org/wiki/Median\"\n                rel=\"_blank\"\n                title=\"Learn more about the median in statistics\"\n              >\n                median\n              </a>{\" \"}\n              is the middle number - useful when outliners skew the mean.\n            </>\n          ),\n        },\n        {\n          key: \"P50\",\n          type: \"P50\",\n          hits: stats.quantile(data, 1 - 0.5).toFixed(2),\n          details: <>50% of results will exceed this estimate.</>,\n        },\n        {\n          key: \"P90\",\n          type: \"P90\",\n          hits: stats.quantile(data, 1 - 0.9).toFixed(2),\n          details: <>90% of results will exceed this estimate.</>,\n        },\n      ]}\n    />\n  );\n};\n","import React from \"react\";\nimport { Form, InputNumber } from \"antd\";\n\nfunction DiceInput(props: {\n  label: string;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form layout=\"inline\">\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<DicePool>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: DicePool;\n  readonly onChanged: (pool: DicePool) => void;\n}\n\nexport interface DicePool {\n  readonly red: number;\n  readonly black: number;\n  readonly white: number;\n}\n","import React from \"react\";\nimport { Collapse, Col, Form, InputNumber, Layout, Row } from \"antd\";\nimport Keywords from \"./ui/Keywords\";\nimport Modifiers from \"./ui/Modifiers\";\nimport Output from \"./ui/Output\";\nimport Pool, { DicePool } from \"./ui/Pool\";\nimport \"./App.scss\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Panel } = Collapse;\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      dice: {\n        red: 1,\n        black: 1,\n        white: 1,\n      },\n      iterations: 10000,\n    };\n  }\n\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <div className=\"logo\">RollCrits 0.2-dev</div>\n        </Header>\n        <Content className=\"site-content\" style={{ padding: \"25px 50px\" }}>\n          <Row>\n            <Col className=\"content-module\" span={12}>\n              <Collapse defaultActiveKey={[1, 2, 3, 4]}>\n                <Panel header=\"Settings\" key=\"1\">\n                  <Form layout=\"inline\">\n                    <Form.Item label=\"Iterations\">\n                      <InputNumber\n                        value={this.state.iterations}\n                        onChange={(v = 0) => this.setState({ iterations: v })}\n                      ></InputNumber>\n                    </Form.Item>\n                  </Form>\n                </Panel>\n                <Panel header=\"Dice Pool\" key=\"2\">\n                  <Pool\n                    dice={this.state.dice}\n                    onChanged={(dice) => {\n                      this.setState({\n                        dice: dice,\n                      });\n                    }}\n                  />\n                </Panel>\n              </Collapse>\n            </Col>\n            <Col className=\"content-module\" span={12}>\n              <Output\n                dice={this.state.dice}\n                iterations={this.state.iterations}\n              />\n            </Col>\n          </Row>\n        </Content>\n        <Footer></Footer>\n      </Layout>\n    );\n  }\n}\n\ninterface AppState {\n  dice: DicePool;\n  iterations: number;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}