{"version":3,"sources":["state/State.tsx","ui/Pool.tsx","ui/Output.tsx","ui/Modifiers.tsx","App.tsx","index.tsx"],"names":["encodeConfig","config","btoa","JSON","stringify","DiceInput","props","Item","label","value","count","min","onChange","Number","isInteger","AttackDiceSide","Pool","dice","this","labelCol","xs","span","sm","red","v","updateDice","black","white","newPool","onChanged","React","Component","DiceRng","rng","Prando","nextArrayItem","table","crit","surge","hit","blank","data","surges","modifiers","i","hits","incrementIfHit","side","w","b","r","push","iterations","grouped","ticks","Set","add","animate","duration","domainPadding","x","height","Object","entries","map","y","labels","datum","length","toFixed","style","fill","axisLabel","padding","bordered","columns","title","dataIndex","width","key","QuestionCircleOutlined","pagination","dataSource","type","stats","details","href","rel","Option","Select","layout","Sider","Layout","App","state","parse","defaultState","fragment","urlState","window","location","hash","indexOf","substring","atob","decodeConfig","encodedState","defaultEncodedState","toString","slider","encodeStateIfChanged","breakpoint","collapsedWidth","className","shortHash","SettingOutlined","max","marks","1","3","5","iterationsToSlider","tipFormatter","slideToIterations","bind","setState","StarOutlined","attackPool","newDice","EditOutlined","Modifiers","attackModifiers","newModifiers","Content","margin","Output","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bca6bbd4.chunk.js","sourcesContent":["/**\n * Simulation-wide state (or configuration).\n */\nexport interface SimConfig {\n  /**\n   * Attacking dice pool.\n   */\n  attackPool: AttackDiceConfig;\n\n  /**\n   * Attacking dice pool modifiers.\n   */\n  attackModifiers: AttackDiceModifiers;\n\n  /**\n   * Number of times the dice should be rolled.\n   */\n  iterations: number;\n}\n\n/**\n * Encodes the provided configuration as base-64 encoded string.\n *\n * @param config\n */\nexport function encodeConfig(config: SimConfig): string {\n  return btoa(JSON.stringify(config));\n}\n\n/**\n * Decodes the provided hash-fragment URL into a config.\n *\n * Returns {undefined} if there was no stored configuration.\n */\nexport function decodeConfig(fragment: string): SimConfig | undefined {\n  let urlState = window.location.hash;\n  if (urlState) {\n    const fragment = urlState.indexOf('#');\n    if (fragment !== -1) {\n      urlState = urlState.substring(fragment + 1);\n    }\n    if (urlState && urlState.length) {\n      return JSON.parse(atob(urlState));\n    }\n  }\n  return undefined;\n}\n\nexport interface AttackDiceConfig {\n  /**\n   * Number of red dice.\n   */\n  red: number;\n\n  /**\n   * Number of black dice.\n   */\n  black: number;\n\n  /**\n   * Number of white dice.\n   */\n  white: number;\n}\n\nexport interface AttackDiceModifiers {\n  surge: 'none' | 'hit' | 'crit';\n}\n","import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { AttackDiceConfig } from '../state/State';\n\nfunction DiceInput(props: {\n  label: React.ReactNode;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form\n        labelCol={{\n          xs: { span: 24 },\n          sm: { span: 8 },\n        }}\n      >\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<AttackDiceConfig>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: AttackDiceConfig;\n  readonly onChanged: (pool: AttackDiceConfig) => void;\n}\n","import React from 'react';\nimport Prando from 'prando';\nimport { Table } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport * as stats from 'simple-statistics';\nimport { AttackDiceConfig, AttackDiceModifiers } from '../state/State';\nimport { VictoryChart, VictoryBar, VictoryAxis } from 'victory';\n\nenum AttackDiceSide {\n  blank,\n  surge,\n  hit,\n  crit,\n}\n\nclass DiceRng {\n  private static readonly table = {\n    white: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    black: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n      AttackDiceSide.blank,\n    ],\n\n    red: [\n      AttackDiceSide.crit,\n      AttackDiceSide.surge,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.hit,\n      AttackDiceSide.blank,\n    ],\n  };\n\n  constructor(private readonly rng: Prando = new Prando()) {}\n\n  white(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.white);\n  }\n\n  black(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.black);\n  }\n\n  red(): AttackDiceSide {\n    return this.rng.nextArrayItem(DiceRng.table.red);\n  }\n}\n\nexport default (props: {\n  dice: AttackDiceConfig;\n  iterations: number;\n  modifiers: AttackDiceModifiers;\n}) => {\n  const data: number[] = [];\n  const rng = new DiceRng();\n  const surges = props.modifiers.surge !== 'none';\n  for (let i = 0; i < props.iterations; i++) {\n    let hits = 0;\n    const incrementIfHit = (side: AttackDiceSide) => {\n      if (side === AttackDiceSide.blank) {\n        return;\n      }\n      if (side === AttackDiceSide.surge && !surges) {\n        return;\n      }\n      hits++;\n    };\n    for (let w = 0; w < props.dice.white; w++) {\n      incrementIfHit(rng.white());\n    }\n    for (let b = 0; b < props.dice.black; b++) {\n      incrementIfHit(rng.black());\n    }\n    for (let r = 0; r < props.dice.red; r++) {\n      incrementIfHit(rng.red());\n    }\n    data.push(hits);\n  }\n  const grouped: { [key: number]: number } = {};\n  const ticks = new Set<number>();\n  for (const hits of data) {\n    grouped[hits] = (grouped[hits] || 0) + 1;\n    ticks.add(hits);\n  }\n  return (\n    <>\n      <VictoryChart\n        animate={{ duration: 1000 }}\n        domainPadding={{ x: 15 }}\n        height={250}\n      >\n        <VictoryBar\n          data={Object.entries(grouped).map((value) => {\n            return { x: value[0], y: value[1] };\n          })}\n          labels={({ datum }) =>\n            `${((datum.y / data.length) * 100).toFixed(0)}%`\n          }\n          style={{\n            data: {\n              fill: 'tomato',\n            },\n          }}\n        />\n        <VictoryAxis\n          label=\"Hits\"\n          style={{\n            axisLabel: { padding: 30 },\n          }}\n        />\n      </VictoryChart>\n      <Table\n        bordered\n        columns={[\n          { title: 'Type', dataIndex: 'type', width: 30, key: 'type' },\n          { title: 'Hits', dataIndex: 'hits', width: 30, key: 'hits' },\n          {\n            title: (\n              <>\n                <QuestionCircleOutlined />\n                &nbsp;Details\n              </>\n            ),\n            dataIndex: 'details',\n            key: 'Details',\n          },\n        ]}\n        pagination={false}\n        dataSource={[\n          {\n            key: 'Mean',\n            type: 'Mean',\n            hits: stats.mean(data).toFixed(2),\n            details: (\n              <>\n                Known as the <em>average</em>, or the sum of all values over the\n                number of all values.\n              </>\n            ),\n          },\n          {\n            key: 'Mode',\n            type: 'Mode',\n            hits: stats.mode(data).toFixed(2),\n            details: (\n              <>\n                The{' '}\n                <a\n                  href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\"\n                  rel=\"_blank\"\n                  title=\"Learn more about the mode in statistics\"\n                >\n                  mode\n                </a>{' '}\n                is the most <em>commonly</em> seen result in the simulation.\n              </>\n            ),\n          },\n          {\n            key: 'Median',\n            type: 'Median',\n            hits: stats.median(data).toFixed(2),\n            details: (\n              <>\n                The{' '}\n                <a\n                  href=\"http://en.wikipedia.org/wiki/Median\"\n                  rel=\"_blank\"\n                  title=\"Learn more about the median in statistics\"\n                >\n                  median\n                </a>{' '}\n                is the middle number - useful when outliners skew the mean.\n              </>\n            ),\n          },\n          {\n            key: 'P50',\n            type: 'P50',\n            hits: stats.quantile(data, 1 - 0.5).toFixed(2),\n            details: <>50% of results will exceed this estimate.</>,\n          },\n          {\n            key: 'P90',\n            type: 'P90',\n            hits: stats.quantile(data, 1 - 0.9).toFixed(2),\n            details: <>90% of results will exceed this estimate.</>,\n          },\n        ]}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { Form, Select } from 'antd';\nimport { AttackDiceModifiers } from '../state/State';\n\nconst { Option } = Select;\n\nexport default (props: {\n  modifiers: AttackDiceModifiers;\n  onChanged: (newModifiers: AttackDiceModifiers) => void;\n}) => {\n  return (\n    <Form layout=\"inline\">\n      <Form.Item label=\"Surge\">\n        <Select\n          value={props.modifiers.surge}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              surge: value,\n            });\n          }}\n        >\n          <Option value=\"none\">None</Option>\n          <Option value=\"hit\">Hit</Option>\n          <Option value=\"crit\">Crit</Option>\n        </Select>\n      </Form.Item>\n    </Form>\n  );\n};\n","import React from 'react';\nimport GitInfo from 'react-git-info/macro';\nimport { Layout, Card, Slider } from 'antd';\nimport './App.scss';\nimport { SimConfig, encodeConfig, decodeConfig } from './state/State';\nimport { SettingOutlined, StarOutlined, EditOutlined } from '@ant-design/icons';\nimport Pool from './ui/Pool';\nimport Output from './ui/Output';\nimport Modifiers from './ui/Modifiers';\n\nconst { Sider } = Layout;\n\nclass App extends React.Component<{}, SimConfig> {\n  private static readonly defaultState: SimConfig = {\n    attackPool: {\n      red: 1,\n      black: 1,\n      white: 1,\n    },\n    attackModifiers: {\n      surge: 'none',\n    },\n    iterations: 10000,\n  };\n\n  private static readonly defaultEncodedState = encodeConfig(App.defaultState);\n  private static readonly shortHash = GitInfo().commit.shortHash;\n\n  constructor(props: {}) {\n    super(props);\n    const state = JSON.parse(JSON.stringify(App.defaultState));\n    this.state = { ...state, ...decodeConfig(window.location.hash) };\n  }\n\n  encodeStateIfChanged() {\n    const encodedState = encodeConfig(this.state);\n    if (encodedState === App.defaultEncodedState) {\n      window.location.hash = '';\n    } else {\n      window.location.hash = encodedState;\n    }\n  }\n\n  private iterationsToSlider(iterations: number): number {\n    return iterations.toString().length - 1;\n  }\n\n  private slideToIterations(slider: number): number {\n    switch (slider) {\n      case 1:\n        return 10;\n      case 2:\n        return 100;\n      case 3:\n        return 1000;\n      case 4:\n        return 10000;\n      case 5:\n        return 100000;\n      default:\n        return App.defaultState.iterations;\n    }\n  }\n\n  render() {\n    this.encodeStateIfChanged();\n    return (\n      <Layout style={{ height: '100vh' }}>\n        <Sider breakpoint=\"lg\" collapsedWidth=\"0\" width=\"250px\">\n          <div className=\"logo\">\n            <strong>RollCrits</strong> #{App.shortHash}\n          </div>\n          <Card\n            title={\n              <span>\n                <SettingOutlined />\n                <span> Settings</span>\n              </span>\n            }\n          >\n            Iterations\n            <Slider\n              min={1}\n              max={5}\n              marks={{\n                1: '10',\n                3: '1000',\n                5: '100000',\n              }}\n              value={this.iterationsToSlider(this.state.iterations)}\n              tipFormatter={this.slideToIterations.bind(this)}\n              onChange={(value) =>\n                this.setState({\n                  iterations: this.slideToIterations(value as number),\n                })\n              }\n            ></Slider>\n          </Card>\n          <Card\n            title={\n              <span>\n                <StarOutlined />\n                <span> Dice</span>\n              </span>\n            }\n          >\n            <Pool\n              dice={this.state.attackPool}\n              onChanged={(newDice) => {\n                this.setState({\n                  attackPool: newDice,\n                });\n              }}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <EditOutlined />\n                <span> Modifiers</span>\n              </span>\n            }\n          >\n            <Modifiers\n              modifiers={this.state.attackModifiers}\n              onChanged={(newModifiers) => {\n                this.setState({\n                  attackModifiers: newModifiers,\n                });\n              }}\n            />\n          </Card>\n        </Sider>\n        <Layout>\n          <Layout.Content style={{ margin: '24px 16px 0' }}>\n            <div className=\"content-module\">\n              <Output\n                dice={this.state.attackPool}\n                iterations={this.state.iterations}\n                modifiers={this.state.attackModifiers}\n              />\n            </div>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}