{"version":3,"sources":["state/state.ts","ui/Pool.tsx","calc/simulate.ts","ui/Output/Breakdown.tsx","ui/Output.tsx","ui/Modifiers.tsx","App.tsx","index.tsx"],"names":["encodeConfig","config","btoa","JSON","stringify","DiceInput","props","Item","label","value","count","min","onChange","Number","isInteger","AttackDiceSide","Pool","dice","this","labelCol","xs","span","sm","red","v","updateDice","black","white","newPool","onChanged","React","Component","defending","name","toWound","armor","avgHits","stats","data","map","d","netHits","avgCrits","netCrits","results","defender","hits","crits","Math","max","total","cover0","cover1","cover2","push","key","toFixed","bordered","columns","title","dataIndex","dataSource","pagination","size","diceTable","crit","surge","hit","blank","configuration","random","Prando","i","iterations","rolled","attackPool","nextArrayItem","roll","attackModifiers","simulate","grouped","ticks","Set","result","add","animate","duration","domainPadding","x","height","Object","entries","y","labels","datum","length","style","fill","axisLabel","padding","Breakdown","Option","Select","layout","modifiers","Sider","Layout","App","state","parse","defaultState","fragment","urlState","window","location","hash","indexOf","substring","atob","decodeConfig","encodedState","defaultEncodedState","toString","slider","encodeStateIfChanged","breakpoint","collapsedWidth","width","className","shortHash","SettingOutlined","marks","1","3","5","iterationsToSlider","tipFormatter","slideToIterations","bind","setState","StarOutlined","newDice","EditOutlined","Modifiers","newModifiers","Content","margin","Output","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1094a7a5.chunk.js","sourcesContent":["/**\n * Simulation-wide state (or configuration).\n */\nexport interface SimConfig {\n  /**\n   * Attacking dice pool.\n   */\n  attackPool: AttackDiceConfig;\n\n  /**\n   * Attacking dice pool modifiers.\n   */\n  attackModifiers: AttackDiceModifiers;\n\n  /**\n   * Number of times the dice should be rolled.\n   */\n  iterations: number;\n}\n\n/**\n * Encodes the provided configuration as base-64 encoded string.\n *\n * @param config\n */\nexport function encodeConfig(config: SimConfig): string {\n  return btoa(JSON.stringify(config));\n}\n\n/**\n * Decodes the provided hash-fragment URL into a config.\n *\n * Returns {undefined} if there was no stored configuration.\n */\nexport function decodeConfig(fragment: string): SimConfig | undefined {\n  let urlState = window.location.hash;\n  if (urlState) {\n    const fragment = urlState.indexOf('#');\n    if (fragment !== -1) {\n      urlState = urlState.substring(fragment + 1);\n    }\n    if (urlState && urlState.length) {\n      return JSON.parse(atob(urlState));\n    }\n  }\n  return undefined;\n}\n\nexport interface AttackDiceConfig {\n  /**\n   * Number of red dice.\n   */\n  red: number;\n\n  /**\n   * Number of black dice.\n   */\n  black: number;\n\n  /**\n   * Number of white dice.\n   */\n  white: number;\n}\n\nexport interface AttackDiceModifiers {\n  surge: 'none' | 'hit' | 'crit';\n}\n","import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { AttackDiceConfig } from '../state/state';\n\nfunction DiceInput(props: {\n  label: React.ReactNode;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form\n        labelCol={{\n          xs: { span: 24 },\n          sm: { span: 8 },\n        }}\n      >\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<AttackDiceConfig>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: AttackDiceConfig;\n  readonly onChanged: (pool: AttackDiceConfig) => void;\n}\n","import Prando from 'prando';\n\nimport { SimConfig } from '../state/state';\n\nexport interface Results {\n  netHits: number;\n  netCrits: number;\n}\n\nexport enum AttackDiceSide {\n  blank,\n  surge,\n  hit,\n  crit,\n}\n\nconst diceTable = {\n  white: [\n    AttackDiceSide.crit,\n    AttackDiceSide.surge,\n    AttackDiceSide.hit,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n  ],\n\n  black: [\n    AttackDiceSide.crit,\n    AttackDiceSide.surge,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n    AttackDiceSide.blank,\n  ],\n\n  red: [\n    AttackDiceSide.crit,\n    AttackDiceSide.surge,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.hit,\n    AttackDiceSide.blank,\n  ],\n};\n\nexport function simulate(configuration: SimConfig): Results[] {\n  const results: Results[] = [];\n  const random = new Prando();\n\n  for (let i = 0; i < configuration.iterations; i++) {\n    // Aggregate results.\n    const rolled: AttackDiceSide[] = [];\n\n    // Roll dice.\n    for (let d = 0; d < configuration.attackPool.red; d++) {\n      rolled.push(random.nextArrayItem(diceTable.red));\n    }\n    for (let d = 0; d < configuration.attackPool.black; d++) {\n      rolled.push(random.nextArrayItem(diceTable.black));\n    }\n    for (let d = 0; d < configuration.attackPool.white; d++) {\n      rolled.push(random.nextArrayItem(diceTable.white));\n    }\n\n    // Determine results.\n    let netHits = 0;\n    let netCrits = 0;\n    for (const roll of rolled) {\n      if (roll === AttackDiceSide.crit) {\n        netCrits++;\n      } else if (roll === AttackDiceSide.hit) {\n        netHits++;\n      } else if (roll === AttackDiceSide.surge) {\n        if (configuration.attackModifiers.surge === 'crit') {\n          netCrits++;\n        } else if (configuration.attackModifiers.surge === 'hit') {\n          netHits++;\n        }\n      }\n    }\n\n    results.push({\n      netHits: netHits,\n      netCrits: netCrits,\n    });\n  }\n\n  return results;\n}\n","import React from 'react';\nimport { Table } from 'antd';\nimport * as stats from 'simple-statistics';\n\n// TODO: Make customizable.\nconst defending = [\n  { name: 'B1 Battle Droid', toWound: 5 / 6, armor: false },\n  { name: 'B2 Battle Droid', toWound: 5 / 6, armor: 1 },\n  { name: 'Rebel Trooper', toWound: 4 / 6, armor: false },\n  { name: 'Stormtrooper', toWound: 3 / 6, armor: false },\n  { name: 'Deathtrooper', toWound: 2 / 6, armor: false },\n  { name: 'Rebel AT-RT', toWound: 5 / 6, armor: true },\n  { name: 'X-34 Landpseeder', toWound: 4 / 6, armor: 2 },\n  { name: 'T-47 Airspeeder', toWound: 4 / 6, armor: true },\n  { name: 'Dewback Rider', toWound: 3 / 6, armor: 1 },\n  { name: 'Occupier Tank', toWound: 3 / 6, armor: true },\n];\n\nexport default (props: {\n  data: Array<{\n    netHits: number;\n    netCrits: number;\n  }>;\n}) => {\n  // Determine average # of hits and crits.\n  const avgHits = stats.mean(props.data.map((d) => d.netHits));\n  const avgCrits = stats.mean(props.data.map((d) => d.netCrits));\n\n  // Aggregate results per defending unit.\n  const results: Array<{\n    key: string;\n    name: string;\n    cover0: string;\n    cover1: string;\n    cover2: string;\n  }> = [];\n\n  for (const defender of defending) {\n    let hits = avgHits;\n    let crits = avgCrits;\n\n    if (defender.armor) {\n      if (defender.armor === true) {\n        hits = 0;\n      } else {\n        hits = Math.max(0, hits - defender.armor);\n      }\n    }\n\n    const total = hits + crits;\n    const cover0 = Math.max(0, total - 0) * defender.toWound;\n    const cover1 = Math.max(0, total - 1) * defender.toWound;\n    const cover2 = Math.max(0, total - 2) * defender.toWound;\n\n    results.push({\n      key: defender.name,\n      name: defender.name,\n      cover0: cover0.toFixed(1),\n      cover1: cover1.toFixed(1),\n      cover2: cover2.toFixed(1),\n    });\n  }\n\n  // Add\n  return (\n    <Table\n      bordered\n      columns={[\n        { title: 'Defending', key: 'name', dataIndex: 'name' },\n        { title: 'No Cover', key: 'cover0', dataIndex: 'cover0' },\n        { title: 'Cover 1', key: 'cover1', dataIndex: 'cover1' },\n        { title: 'Cover 2', key: 'cover2', dataIndex: 'cover2' },\n      ]}\n      dataSource={results}\n      pagination={false}\n      size={'small'}\n    ></Table>\n  );\n};\n","import React from 'react';\nimport { VictoryChart, VictoryBar, VictoryAxis } from 'victory';\nimport * as stats from 'simple-statistics';\nimport Breakdown from './Output/Breakdown';\nimport { SimConfig } from '../state/state';\nimport { simulate } from '../calc/simulate';\n\nexport default (props: { simulate: SimConfig }) => {\n  const data = simulate(props.simulate);\n  const grouped: { [key: number]: number } = {};\n  const ticks = new Set<number>();\n  for (const result of data) {\n    const hits = result.netCrits + result.netHits;\n    grouped[hits] = (grouped[hits] || 0) + 1;\n    ticks.add(hits);\n  }\n  return (\n    <>\n      <VictoryChart\n        animate={{ duration: 1000 }}\n        domainPadding={{ x: 15 }}\n        height={200}\n      >\n        <VictoryBar\n          data={Object.entries(grouped).map((value) => {\n            return { x: value[0], y: value[1] };\n          })}\n          labels={({ datum }) =>\n            `${((datum.y / data.length) * 100).toFixed(0)}%`\n          }\n          style={{\n            data: {\n              fill: 'tomato',\n            },\n          }}\n        />\n        <VictoryAxis\n          label={`μ Hits: ${stats\n            .mean(data.map((d) => d.netHits + d.netCrits))\n            .toFixed(1)}`}\n          style={{\n            axisLabel: { padding: 30 },\n          }}\n        />\n      </VictoryChart>\n      <Breakdown data={data} />\n    </>\n  );\n};\n","import React from 'react';\nimport { Form, Select } from 'antd';\nimport { AttackDiceModifiers } from '../state/state';\n\nconst { Option } = Select;\n\nexport default (props: {\n  modifiers: AttackDiceModifiers;\n  onChanged: (newModifiers: AttackDiceModifiers) => void;\n}) => {\n  return (\n    <Form layout=\"inline\">\n      <Form.Item label=\"Surge\">\n        <Select\n          value={props.modifiers.surge}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              surge: value,\n            });\n          }}\n        >\n          <Option value=\"none\">None</Option>\n          <Option value=\"hit\">Hit</Option>\n          <Option value=\"crit\">Crit</Option>\n        </Select>\n      </Form.Item>\n    </Form>\n  );\n};\n","import React from 'react';\nimport GitInfo from 'react-git-info/macro';\nimport { Layout, Card, Slider } from 'antd';\nimport './App.scss';\nimport { SimConfig, encodeConfig, decodeConfig } from './state/state';\nimport { SettingOutlined, StarOutlined, EditOutlined } from '@ant-design/icons';\nimport Pool from './ui/Pool';\nimport Output from './ui/Output';\nimport Modifiers from './ui/Modifiers';\n\nconst { Sider } = Layout;\n\nclass App extends React.Component<{}, SimConfig> {\n  private static readonly defaultState: SimConfig = {\n    attackPool: {\n      red: 1,\n      black: 1,\n      white: 1,\n    },\n    attackModifiers: {\n      surge: 'none',\n    },\n    iterations: 10000,\n  };\n\n  private static readonly defaultEncodedState = encodeConfig(App.defaultState);\n  private static readonly shortHash = GitInfo().commit.shortHash;\n\n  constructor(props: {}) {\n    super(props);\n    const state = JSON.parse(JSON.stringify(App.defaultState));\n    this.state = { ...state, ...decodeConfig(window.location.hash) };\n  }\n\n  encodeStateIfChanged() {\n    const encodedState = encodeConfig(this.state);\n    if (encodedState === App.defaultEncodedState) {\n      window.location.hash = '';\n    } else {\n      window.location.hash = encodedState;\n    }\n  }\n\n  private iterationsToSlider(iterations: number): number {\n    return iterations.toString().length - 1;\n  }\n\n  private slideToIterations(slider: number): number {\n    switch (slider) {\n      case 1:\n        return 10;\n      case 2:\n        return 100;\n      case 3:\n        return 1000;\n      case 4:\n        return 10000;\n      case 5:\n        return 100000;\n      default:\n        return App.defaultState.iterations;\n    }\n  }\n\n  render() {\n    this.encodeStateIfChanged();\n    return (\n      <Layout style={{ height: '100vh' }}>\n        <Sider breakpoint=\"lg\" collapsedWidth=\"0\" width=\"250px\">\n          <div className=\"logo\">\n            <strong>RollCrits</strong> #{App.shortHash}\n          </div>\n          <Card\n            title={\n              <span>\n                <SettingOutlined />\n                <span> Settings</span>\n              </span>\n            }\n          >\n            Iterations\n            <Slider\n              min={1}\n              max={5}\n              marks={{\n                1: '10',\n                3: '1000',\n                5: '100000',\n              }}\n              value={this.iterationsToSlider(this.state.iterations)}\n              tipFormatter={this.slideToIterations.bind(this)}\n              onChange={(value) =>\n                this.setState({\n                  iterations: this.slideToIterations(value as number),\n                })\n              }\n            ></Slider>\n          </Card>\n          <Card\n            title={\n              <span>\n                <StarOutlined />\n                <span> Dice</span>\n              </span>\n            }\n          >\n            <Pool\n              dice={this.state.attackPool}\n              onChanged={(newDice) => {\n                this.setState({\n                  attackPool: newDice,\n                });\n              }}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <EditOutlined />\n                <span> Modifiers</span>\n              </span>\n            }\n          >\n            <Modifiers\n              modifiers={this.state.attackModifiers}\n              onChanged={(newModifiers) => {\n                this.setState({\n                  attackModifiers: newModifiers,\n                });\n              }}\n            />\n          </Card>\n        </Sider>\n        <Layout>\n          <Layout.Content style={{ margin: '24px 16px 0' }}>\n            <div className=\"content-module\">\n              <Output simulate={this.state} />\n            </div>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}