{"version":3,"sources":["app/state.ts","ui/Pool.tsx","app/simulation.ts","ui/Output/Breakdown.tsx","ui/Output.tsx","ui/Modifiers.tsx","ui/IterationSlider.tsx","ui/SeedInput.tsx","ui/Tokens.tsx","app/App.tsx","index.tsx"],"names":["Prando","nextString","encodeConfig","config","btoa","JSON","stringify","DiceInput","props","Item","label","value","count","min","onChange","Number","isInteger","AttackDieSide","DefenseDieSide","Pool","dice","this","labelCol","xs","span","sm","red","v","updateDice","black","white","newPool","onChanged","React","Component","AttackDieType","crit","surge","hit","blank","DefenseDieType","block","AttackDie","sides","order","rng","nextArrayItem","DefenseDie","AttackBranch","result","modifiers","tokens","hits","crits","critical","surgeTokens","roll","cover","defender","aggregateDice","Math","max","armor","convert","impact","DefenseBranch","pierce","stats","Array","fill","blocks","generateDefenseDice","surges","Simulation","rngSeed","results","dicePool","pool","i","push","a","b","branches","iterations","length","generateAttackDice","map","d","sort","defending","name","none","compareFloats","parseFloat","woundsByCoverAmount","data","branch","wounds","expectedWounds","w","toFixed","key","cover0","cover1","cover2","bordered","columns","title","dataIndex","sorter","compareStrings","dataSource","pagination","size","simulate","grouped","ticks","Set","rawTotalHits","add","animate","duration","domainPadding","x","height","Object","entries","y","labels","datum","style","axisLabel","padding","mods","Option","Select","slideToIterations","slider","App","defaultState","marks","1","3","5","toString","tipFormatter","maxLength","target","offset","icon","SyncOutlined","onClick","Sider","Layout","state","parse","fragment","urlState","window","location","hash","indexOf","substring","atob","decodeConfig","encodedState","defaultEncodedState","encodeStateIfChanged","minHeight","breakpoint","collapsedWidth","width","className","shortHash","SettingOutlined","layout","IterationSlider","setState","SeedInput","disabled","type","StarOutlined","newDice","EditOutlined","Modifiers","newModifiers","AppstoreOutlined","Tokens","newTokens","Content","margin","Output","freeze","marksman","precise","aim","dodge","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.388b816a.chunk.js","sourcesContent":["import Prando from 'prando';\nimport { AttackDieSide } from './simulation';\n\nexport let sessionRngSeed = new Prando().nextString(10);\n\n/**\n * Simulation-wide state (or configuration).\n */\nexport interface SimConfig {\n  /**\n   * Attacking dice pool.\n   */\n  pool: AttackDiceConfig;\n\n  /**\n   * Attacking dice pool modifiers.\n   */\n  modifiers: AttackDiceModifiers;\n\n  /**\n   * Number of times the dice should be rolled.\n   */\n  iterations: number;\n\n  /**\n   * Random seed used for simulations.\n   */\n  rngSeed: string;\n\n  /**\n   * Tokens available to spend.\n   */\n  tokens: AttackerTokens;\n}\n\n/**\n * Encodes the provided configuration as base-64 encoded string.\n *\n * @param config\n */\nexport function encodeConfig(config: SimConfig): string {\n  return btoa(JSON.stringify(config));\n}\n\n/**\n * Decodes the provided hash-fragment URL into a config.\n *\n * Returns {undefined} if there was no stored configuration.\n */\nexport function decodeConfig(fragment: string): SimConfig | undefined {\n  let urlState = window.location.hash;\n  if (urlState) {\n    const fragment = urlState.indexOf('#');\n    if (fragment !== -1) {\n      urlState = urlState.substring(fragment + 1);\n    }\n    if (urlState && urlState.length && urlState !== 'default') {\n      return JSON.parse(atob(urlState));\n    }\n  }\n  return undefined;\n}\n\nexport interface AttackDiceConfig {\n  /**\n   * Number of red dice.\n   */\n  red: number;\n\n  /**\n   * Number of black dice.\n   */\n  black: number;\n\n  /**\n   * Number of white dice.\n   */\n  white: number;\n}\n\nexport interface AttackDiceModifiers {\n  /**\n   * How much critical the dice pool has.\n   */\n  critical: number;\n\n  /**\n   * How much impact the dice pool has.\n   */\n  impact: number;\n\n  /**\n   * Whether the pool has marksman.\n   */\n  marksman: boolean;\n\n  /**\n   * How much pierce the dice pool has.\n   */\n  pierce: number;\n\n  /**\n   * How many additional dice may be re-rolled during an aim.\n   */\n  precise: number;\n\n  /**\n   * What the `surge` icon the dice should convert to.\n   */\n  surge: AttackDieSide.blank | AttackDieSide.hit | AttackDieSide.crit;\n}\n\nexport interface AttackerTokens {\n  /**\n   * Aim tokens available.\n   */\n  aim: number;\n\n  /**\n   * Dodge tokens available.\n   */\n  dodge: number;\n\n  /**\n   * Surge tokens available.\n   */\n  surge: number;\n}\n","import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { AttackDiceConfig } from '../app/state';\n\nfunction DiceInput(props: {\n  label: React.ReactNode;\n  count: number;\n  onChange: (count: number) => void;\n}) {\n  return (\n    <Form.Item label={props.label}>\n      <InputNumber\n        value={props.count}\n        min={0}\n        onChange={(value = 0) => {\n          props.onChange(Number.isInteger(value) ? value : props.count);\n        }}\n      ></InputNumber>\n    </Form.Item>\n  );\n}\n\nexport default class Pool extends React.Component<PoolProps> {\n  render() {\n    const dice = this.props.dice;\n    return (\n      <Form\n        labelCol={{\n          xs: { span: 24 },\n          sm: { span: 12 },\n        }}\n      >\n        <DiceInput\n          label=\"Red\"\n          count={dice.red}\n          onChange={(v: number) => this.updateDice({ red: v })}\n        />\n        <DiceInput\n          label=\"Black\"\n          count={dice.black}\n          onChange={(v: number) => this.updateDice({ black: v })}\n        />\n        <DiceInput\n          label=\"White\"\n          count={dice.white}\n          onChange={(v: number) => this.updateDice({ white: v })}\n        />\n      </Form>\n    );\n  }\n\n  updateDice(newPool: Partial<AttackDiceConfig>) {\n    this.props.onChanged({ ...this.props.dice, ...newPool });\n  }\n}\n\nexport interface PoolProps {\n  readonly dice: AttackDiceConfig;\n  readonly onChanged: (pool: AttackDiceConfig) => void;\n}\n","import Prando from 'prando';\nimport { SimConfig, AttackDiceModifiers, AttackerTokens } from './state';\n\n/**\n * Sides of an attack die.\n */\nexport enum AttackDieSide {\n  blank = 'blank',\n  surge = 'surge',\n  hit = 'hit',\n  crit = 'crit',\n}\n\n/**\n * Sides of a defense die.\n */\nexport enum DefenseDieSide {\n  blank = 'blank',\n  surge = 'surge',\n  block = 'block',\n}\n\n/**\n * Types of an attack die.\n */\nexport const AttackDieType = {\n  white: [\n    AttackDieSide.crit,\n    AttackDieSide.surge,\n    AttackDieSide.hit,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n  ],\n  black: [\n    AttackDieSide.crit,\n    AttackDieSide.surge,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n    AttackDieSide.blank,\n  ],\n  red: [\n    AttackDieSide.crit,\n    AttackDieSide.surge,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.hit,\n    AttackDieSide.blank,\n  ],\n};\n\n/**\n * Types of a defense die.\n */\nexport const DefenseDieType = {\n  white: [\n    DefenseDieSide.block,\n    DefenseDieSide.surge,\n    DefenseDieSide.blank,\n    DefenseDieSide.blank,\n    DefenseDieSide.blank,\n    DefenseDieSide.blank,\n  ],\n\n  red: [\n    DefenseDieSide.block,\n    DefenseDieSide.block,\n    DefenseDieSide.block,\n    DefenseDieSide.surge,\n    DefenseDieSide.blank,\n    DefenseDieSide.blank,\n  ],\n};\n\n/**\n * Defines a single attack die.\n */\nexport class AttackDie {\n  static red(): AttackDie {\n    return new AttackDie(AttackDieType.red, 3);\n  }\n\n  static black(): AttackDie {\n    return new AttackDie(AttackDieType.black, 2);\n  }\n\n  static white(): AttackDie {\n    return new AttackDie(AttackDieType.white, 1);\n  }\n\n  private constructor(\n    private readonly sides: AttackDieSide[],\n    public readonly order: number,\n  ) {}\n\n  /**\n   * With the provided {rng}, changes the result of the die.\n   */\n  roll(rng: Prando): AttackDieSide {\n    return rng.nextArrayItem(this.sides);\n  }\n}\n\n/**\n * Defines a single defense die.\n */\nexport class DefenseDie {\n  static red(): DefenseDie {\n    return new DefenseDie(DefenseDieType.red);\n  }\n\n  static white(): DefenseDie {\n    return new DefenseDie(DefenseDieType.white);\n  }\n\n  static none(): DefenseDie {\n    return new DefenseDie([DefenseDieSide.blank]);\n  }\n\n  private constructor(private readonly sides: DefenseDieSide[]) {}\n\n  /**\n   * With the provided {rng}, changes the result of the die.\n   */\n  roll(rng: Prando): DefenseDieSide {\n    return rng.nextArrayItem(this.sides);\n  }\n}\n\nexport interface DefenseStats {\n  /**\n   * Type of defense die\n   */\n  dice: DefenseDie;\n\n  /**\n   * Set if the die surge-side is considered a block.\n   */\n  surges?: true;\n\n  /**\n   * Set if numerical or unlimited armor.\n   */\n  armor?: number | true;\n\n  /**\n   * Set if immune to pierce or impervious to pierce.\n   */\n  pierce?: 'immune' | 'impervious';\n}\n\nexport class AttackBranch {\n  constructor(\n    private readonly rng: Prando,\n    private readonly result: Array<{ dice: AttackDie; roll: AttackDieSide }>,\n    private readonly modifiers: AttackDiceModifiers,\n    private readonly tokens: AttackerTokens,\n  ) {}\n\n  private aggregateDice(): { hits: number; crits: number } {\n    let hits = 0;\n    let crits = 0;\n    let critical = this.modifiers.critical;\n    let surgeTokens = this.tokens.surge;\n\n    for (const result of this.result) {\n      let { roll } = result;\n\n      if (roll === AttackDieSide.surge) {\n        if (critical) {\n          roll = AttackDieSide.crit;\n          critical--;\n        } else if (this.modifiers.surge !== 'blank' && surgeTokens) {\n          roll = AttackDieSide.hit;\n          surgeTokens--;\n        } else {\n          roll = this.modifiers.surge;\n        }\n      }\n\n      // TODO: Implement aim tokens.\n\n      switch (roll) {\n        case AttackDieSide.crit:\n          crits++;\n          break;\n        case AttackDieSide.hit:\n          hits++;\n          break;\n        case AttackDieSide.blank:\n          break;\n      }\n    }\n\n    return { hits, crits };\n  }\n\n  /**\n   * Returns the computed number of hits given cover and defense stats.\n   */\n  hits(cover: number, defender: DefenseStats): DefenseBranch {\n    let { hits, crits } = this.aggregateDice();\n\n    // Reduce hits by the amount of static cover, to a minimum of 0.\n    hits = Math.max(0, hits - cover);\n\n    // If `armor`, convert hits to crits, and deplete all or some hits.\n    if (defender.armor) {\n      const convert = Math.min(hits, this.modifiers.impact);\n      hits -= convert;\n      crits += convert;\n\n      if (defender.armor === true) {\n        // All non-converted hits are now cancelled.\n        hits = 0;\n      } else {\n        // Reduce hits by the amount of static armor, to a minimum of 0.\n        hits = Math.max(0, hits - defender.armor);\n      }\n    }\n\n    // Final number of dice that will need to be rolled for wounds.\n    // TODO: Consider returning multiple branches per attack.\n    return new DefenseBranch(\n      this.rng,\n      hits + crits,\n      defender,\n      this.modifiers.pierce,\n    );\n  }\n\n  get rawTotalHits(): number {\n    let { hits, crits } = this.aggregateDice();\n    return hits + crits;\n  }\n}\n\nexport class DefenseBranch {\n  constructor(\n    private readonly rng: Prando,\n    public readonly hits: number,\n    private readonly stats: DefenseStats,\n    private readonly pierce: number,\n  ) {}\n\n  /**\n   * Given the configuration, generates appropriate defense dice.\n   */\n  private generateDefenseDice(): DefenseDie[] {\n    let hits = this.hits;\n    if (this.stats.pierce === 'impervious') {\n      hits += this.pierce;\n    }\n    return Array(hits).fill(this.stats.dice);\n  }\n\n  /**\n   * Computes the number of wounds based on rolling defensive dice.\n   */\n  wounds(): number {\n    let blocks = 0;\n\n    for (const die of this.generateDefenseDice()) {\n      switch (die.roll(this.rng)) {\n        case DefenseDieSide.block:\n          blocks++;\n          break;\n        case DefenseDieSide.surge:\n          if (this.stats.surges) {\n            blocks++;\n          }\n          break;\n        case DefenseDieSide.blank:\n          break;\n      }\n    }\n\n    if (this.pierce && this.stats.pierce !== 'immune') {\n      blocks = Math.max(0, blocks - this.pierce);\n    }\n\n    // Future-proof against things like danger sense, a minimum of 0 wounds.\n    return Math.max(0, this.hits - blocks);\n  }\n}\n\n/**\n * Manages running the simulation from the top-down (as the root).\n */\nexport class Simulation {\n  private readonly rng: Prando;\n\n  constructor(private readonly config: SimConfig) {\n    this.rng = new Prando(config.rngSeed);\n  }\n\n  /**\n   * Given the configuration, generates appropriate attack dice.\n   */\n  private generateAttackDice(): AttackDie[] {\n    const results: AttackDie[] = [];\n    const dicePool = this.config.pool;\n    for (let i = 0; i < dicePool.red; i++) {\n      results.push(AttackDie.red());\n    }\n    for (let i = 0; i < dicePool.black; i++) {\n      results.push(AttackDie.black());\n    }\n    for (let i = 0; i < dicePool.white; i++) {\n      results.push(AttackDie.white());\n    }\n    return results;\n  }\n\n  private staticSortDice(a: AttackDie, b: AttackDie) {}\n\n  /**\n   * Returns possible results of the simulation.\n   */\n  simulate(): AttackBranch[] {\n    const branches: AttackBranch[] = Array(this.config.iterations);\n    for (let i = 0; i < branches.length; i++) {\n      // Roll dice.\n      const results = this.generateAttackDice()\n        .map((d) => {\n          return {\n            dice: d,\n            roll: d.roll(this.rng),\n          };\n        })\n        .sort((a, b) => a.dice.order - b.dice.order);\n\n      branches[i] = new AttackBranch(\n        this.rng,\n        results,\n        this.config.modifiers,\n        this.config.tokens,\n      );\n    }\n    return branches;\n  }\n}\n","import React from 'react';\nimport { Table } from 'antd';\n\nimport './Breakdown.scss';\n\nimport * as stats from 'simple-statistics';\nimport { AttackBranch, DefenseDie, DefenseStats } from '../../app/simulation';\n\ninterface Defender extends DefenseStats {\n  name: string;\n}\n\n// TODO: Make customizable.\nconst defending: Defender[] = [\n  // Used as a benchmark for a unit that never rolls saves.\n  { name: 'Expected Hits', dice: DefenseDie.none() },\n\n  // Sample units.\n  { name: 'B1 Battle Droid', dice: DefenseDie.white() },\n  { name: 'B2 Battle Droid', dice: DefenseDie.white(), armor: 1 },\n  { name: 'Rebel Trooper', dice: DefenseDie.white(), surges: true },\n  { name: 'Stormtrooper', dice: DefenseDie.red() },\n  { name: 'Deathtrooper', dice: DefenseDie.red(), surges: true },\n  {\n    name: 'Boba Fett',\n    dice: DefenseDie.red(),\n    surges: true,\n    pierce: 'impervious',\n  },\n  { name: 'Darth Vader', dice: DefenseDie.red(), pierce: 'immune' },\n  {\n    name: 'Emperor Palpatine',\n    dice: DefenseDie.red(),\n    pierce: 'immune',\n    surges: true,\n  },\n  { name: 'Rebel AT-RT', dice: DefenseDie.white(), armor: true },\n  {\n    name: 'X-34 Landpseeder',\n    dice: DefenseDie.white(),\n    surges: true,\n    armor: 2,\n  },\n  { name: 'AT-ST', dice: DefenseDie.white(), surges: true, armor: true },\n  { name: 'Dewback Rider', dice: DefenseDie.red(), armor: 1 },\n  { name: 'Occupier Tank', dice: DefenseDie.red(), armor: true },\n];\n\nfunction compareStrings(a: string, b: string) {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\n\nfunction compareFloats(a: string, b: string) {\n  return Number.parseFloat(a) - Number.parseFloat(b);\n}\n\nexport default (props: {\n  mods: {\n    impact: number;\n  };\n  data: AttackBranch[];\n}) => {\n  // Aggregate results per defending unit.\n  const results: Array<{\n    key: string;\n    cover0: string;\n    cover1: string;\n    cover2: string;\n  }> = [];\n\n  for (const defender of defending) {\n    let woundsByCoverAmount: number[][] = [[], [], []];\n\n    // For each amount of cover.\n    for (let cover = 0; cover < woundsByCoverAmount.length; cover++) {\n      // For each attacking dice pool.\n      for (const branch of props.data) {\n        // Add the number of expected wounds (v cover + defender).\n        woundsByCoverAmount[cover].push(branch.hits(cover, defender).wounds());\n      }\n    }\n\n    const expectedWounds = woundsByCoverAmount.map((w) =>\n      stats.mean(w).toFixed(2),\n    );\n\n    results.push({\n      key: defender.name,\n      cover0: expectedWounds[0],\n      cover1: expectedWounds[1],\n      cover2: expectedWounds[2],\n    });\n  }\n\n  // Add the expected hits independent of the defending unit.\n\n  return (\n    <Table\n      bordered\n      columns={[\n        {\n          title: 'Defending',\n          key: 'key',\n          dataIndex: 'key',\n          sorter: (a, b) => compareStrings(a.key, b.key),\n        },\n        {\n          title: 'No Cover',\n          key: 'cover0',\n          dataIndex: 'cover0',\n          sorter: (a, b) => compareFloats(a.cover0, b.cover0),\n        },\n        {\n          title: 'Cover 1',\n          key: 'cover1',\n          dataIndex: 'cover1',\n          sorter: (a, b) => compareFloats(a.cover1, b.cover1),\n        },\n        {\n          title: 'Cover 2',\n          key: 'cover2',\n          dataIndex: 'cover2',\n          sorter: (a, b) => compareFloats(a.cover2, b.cover2),\n        },\n      ]}\n      dataSource={results}\n      pagination={false}\n      size={'small'}\n    ></Table>\n  );\n};\n","import React from 'react';\nimport { VictoryChart, VictoryBar, VictoryAxis } from 'victory';\nimport Breakdown from './Output/Breakdown';\nimport { SimConfig } from '../app/state';\nimport { Simulation } from '../app/simulation';\n\nexport default (props: { simulate: SimConfig }) => {\n  const data = new Simulation(props.simulate).simulate();\n  const grouped: { [key: number]: number } = {};\n  const ticks = new Set<number>();\n  for (const result of data) {\n    const hits = result.rawTotalHits;\n    grouped[hits] = (grouped[hits] || 0) + 1;\n    ticks.add(hits);\n  }\n  return (\n    <>\n      <VictoryChart\n        animate={{ duration: 1000 }}\n        domainPadding={{ x: 15 }}\n        height={200}\n      >\n        <VictoryBar\n          data={Object.entries(grouped).map((value) => {\n            return { x: value[0], y: value[1] };\n          })}\n          labels={({ datum }) =>\n            `${((datum.y / data.length) * 100).toFixed(0)}%`\n          }\n          style={{\n            data: {\n              fill: 'tomato',\n            },\n          }}\n        />\n        <VictoryAxis\n          style={{\n            axisLabel: { padding: 30 },\n          }}\n        />\n      </VictoryChart>\n      <Breakdown\n        data={data}\n        mods={{\n          impact: props.simulate.modifiers.impact,\n        }}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { Form, Select, InputNumber, Divider } from 'antd';\nimport { AttackDiceModifiers } from '../app/state';\nimport { AttackDieSide } from '../app/simulation';\n\nconst { Option } = Select;\n\nexport default (props: {\n  modifiers: AttackDiceModifiers;\n  onChanged: (newModifiers: AttackDiceModifiers) => void;\n}) => {\n  return (\n    <Form\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 12 },\n      }}\n    >\n      <Form.Item label=\"Surge\">\n        <Select\n          value={props.modifiers.surge}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              surge: value,\n            });\n          }}\n        >\n          <Option value={AttackDieSide.blank}>None</Option>\n          <Option value={AttackDieSide.hit}>Hit</Option>\n          <Option value={AttackDieSide.crit}>Crit</Option>\n        </Select>\n      </Form.Item>\n      <Divider />\n      <Form.Item label=\"Critical\">\n        <InputNumber\n          value={props.modifiers.critical}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              critical: value === 0 ? 0 : value || props.modifiers.critical,\n            });\n          }}\n        />\n      </Form.Item>\n      <Form.Item label=\"Impact\">\n        <InputNumber\n          value={props.modifiers.impact}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              impact: value === 0 ? 0 : value || props.modifiers.impact,\n            });\n          }}\n        />\n      </Form.Item>\n      {/*\n        TODO: Enable.\n\n        <Form.Item label=\"Marksman\">\n          <Switch\n            checked={props.modifiers.marksman}\n            onChange={(value) => {\n              props.onChanged({\n                ...props.modifiers,\n                marksman: value,\n              });\n            }}\n          />\n        </Form.Item>\n      */}\n      <Form.Item label=\"Pierce\">\n        <InputNumber\n          value={props.modifiers.pierce}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.modifiers,\n              pierce: value === 0 ? 0 : value || props.modifiers.pierce,\n            });\n          }}\n        />\n      </Form.Item>\n      {/*\n        TODO: Enable aim tokens.\n\n        <Form.Item label=\"Precise\">\n          <InputNumber\n            value={props.modifiers.precise}\n            min={0}\n            onChange={(value) => {\n              props.onChanged({\n                ...props.modifiers,\n                precise: value === 0 ? 0 : value || props.modifiers.precise,\n              });\n            }}\n          />\n        </Form.Item>\n      */}\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Slider } from 'antd';\n\nimport App from '../app/App';\n\nfunction iterationsToSlider(iterations: number): number {\n  return iterations.toString().length - 1;\n}\n\nfunction slideToIterations(slider: number): number {\n  switch (slider) {\n    case 1:\n      return 10;\n    case 2:\n      return 100;\n    case 3:\n      return 1000;\n    case 4:\n      return 10000;\n    case 5:\n      return 100000;\n    default:\n      return App.defaultState.iterations;\n  }\n}\n\nexport default function (props: {\n  value: number;\n  onChanged: (value: number) => void;\n}) {\n  return (\n    <Slider\n      min={1}\n      max={5}\n      marks={{\n        1: '10',\n        3: '1000',\n        5: '100000',\n      }}\n      value={iterationsToSlider(props.value)}\n      tipFormatter={slideToIterations}\n      onChange={(value) => props.onChanged(slideToIterations(value as number))}\n    ></Slider>\n  );\n}\n","import React from 'react';\nimport { Row, Col, Input, Button } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport Prando from 'prando';\n\nexport default function (props: {\n  value: string;\n  onChanged: (value: string) => void;\n}) {\n  return (\n    <Row>\n      <Col span={18}>\n        <Input\n          value={props.value}\n          maxLength={10}\n          onChange={(v) => props.onChanged(v.target.value)}\n        />\n      </Col>\n      <Col span={2} offset={2}>\n        <Button\n          icon={<SyncOutlined />}\n          title=\"Randomize\"\n          onClick={() => props.onChanged(new Prando().nextString(10))}\n        />\n      </Col>\n    </Row>\n  );\n}\n","import React from 'react';\nimport { Form, InputNumber } from 'antd';\nimport { AttackerTokens } from '../app/state';\n\nexport default (props: {\n  tokens: AttackerTokens;\n  onChanged: (newModifiers: AttackerTokens) => void;\n}) => {\n  return (\n    <Form\n      labelCol={{\n        xs: { span: 24 },\n        sm: { span: 8 },\n      }}\n    >\n      {/*\n        TODO: Enable aim tokens.\n\n        <Form.Item label=\"Aim\">\n          <InputNumber\n            value={props.tokens.aim}\n            min={0}\n            onChange={(value) => {\n              props.onChanged({\n                ...props.tokens,\n                aim: value === 0 ? 0 : value || props.tokens.aim,\n              });\n            }}\n          />\n        </Form.Item>\n      */}\n      <Form.Item label=\"Surge\">\n        <InputNumber\n          value={props.tokens.surge}\n          min={0}\n          onChange={(value) => {\n            props.onChanged({\n              ...props.tokens,\n              surge: value === 0 ? 0 : value || props.tokens.surge,\n            });\n          }}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n","import React from 'react';\nimport GitInfo from 'react-git-info/macro';\nimport { Layout, Card, Form, Button, Row, Col } from 'antd';\nimport {\n  SettingOutlined,\n  StarOutlined,\n  EditOutlined,\n  AppstoreOutlined,\n} from '@ant-design/icons';\n\nimport './App.scss';\n\nimport { SimConfig, encodeConfig, decodeConfig } from './state';\nimport Pool from '../ui/Pool';\nimport Output from '../ui/Output';\nimport Modifiers from '../ui/Modifiers';\nimport IterationSlider from '../ui/IterationSlider';\nimport Prando from 'prando';\nimport SeedInput from '../ui/SeedInput';\nimport { AttackDieSide } from './simulation';\nimport Tokens from '../ui/Tokens';\n\nconst { Sider } = Layout;\n\nclass App extends React.Component<{}, SimConfig> {\n  public static readonly defaultState: SimConfig = Object.freeze({\n    pool: {\n      red: 1,\n      black: 1,\n      white: 1,\n    },\n    modifiers: {\n      critical: 0,\n      impact: 0,\n      marksman: false,\n      pierce: 0,\n      precise: 0,\n      surge: AttackDieSide.blank,\n    },\n    tokens: {\n      surge: 0,\n      aim: 0,\n      dodge: 0,\n    },\n    iterations: 10000,\n    rngSeed: `${new Prando().nextString(10)}`,\n  });\n\n  private static readonly defaultEncodedState = encodeConfig(App.defaultState);\n  private static readonly shortHash = GitInfo().commit.shortHash;\n\n  constructor(props: {}) {\n    super(props);\n    const state = JSON.parse(JSON.stringify(App.defaultState));\n    this.state = { ...state, ...decodeConfig(window.location.hash) };\n  }\n\n  encodeStateIfChanged() {\n    const encodedState = encodeConfig(this.state);\n    if (encodedState === App.defaultEncodedState) {\n      window.location.hash = 'default';\n    } else {\n      window.location.hash = encodedState;\n    }\n  }\n\n  render() {\n    this.encodeStateIfChanged();\n    return (\n      <Layout style={{ minHeight: '100vh', height: '100%' }}>\n        <Sider\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          width=\"250px\"\n          style={{ minHeight: '100vh', height: '100%' }}\n        >\n          <div className=\"logo\">\n            <strong>RollCrits</strong> #{App.shortHash}\n          </div>\n          <Card\n            title={\n              <span>\n                <SettingOutlined />\n                <span> Settings</span>\n              </span>\n            }\n          >\n            <Form layout=\"vertical\">\n              <Form.Item label=\"Iterations\">\n                <IterationSlider\n                  value={this.state.iterations}\n                  onChanged={(value) => this.setState({ iterations: value })}\n                />\n              </Form.Item>\n              <Form.Item label=\"RNG Seed\">\n                <SeedInput\n                  value={this.state.rngSeed}\n                  onChanged={(value) => this.setState({ rngSeed: value })}\n                />\n              </Form.Item>\n              <Row>\n                <Col span={24}>\n                  <Button\n                    block\n                    disabled={window.location.hash === '#default'}\n                    type=\"danger\"\n                    onClick={() => {\n                      this.setState(App.defaultState);\n                    }}\n                  >\n                    Reset\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          </Card>\n          <Card\n            title={\n              <span>\n                <StarOutlined />\n                <span> Dice</span>\n              </span>\n            }\n          >\n            <Pool\n              dice={this.state.pool}\n              onChanged={(newDice) => {\n                this.setState({\n                  pool: newDice,\n                });\n              }}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <EditOutlined />\n                <span> Modifiers</span>\n              </span>\n            }\n          >\n            <Modifiers\n              modifiers={this.state.modifiers}\n              onChanged={(newModifiers) => {\n                this.setState({\n                  modifiers: newModifiers,\n                });\n              }}\n            />\n          </Card>\n          <Card\n            title={\n              <span>\n                <AppstoreOutlined />\n                <span> Tokens</span>\n              </span>\n            }\n          >\n            <Tokens\n              tokens={this.state.tokens}\n              onChanged={(newTokens) => {\n                this.setState({\n                  tokens: newTokens,\n                });\n              }}\n            />\n          </Card>\n        </Sider>\n        <Layout>\n          <Layout.Content style={{ margin: '24px 16px 0' }}>\n            <div className=\"content-module\">\n              <Output simulate={this.state} />\n            </div>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}